{"matrix":[[],[{"ID":135,"CreatedAt":"2022-07-08T08:34:24.263Z","UpdatedAt":"2022-07-08T08:40:34.57Z","DeletedAt":null,"title":"docker container start 源码分析","function_declare":"","git_url":"","note":"","code":"","markdown":"# docker container start 源码分析\n\n<small>\n本文编写时，最新release为v20.10.14, 下文涉及代码均为该版本的代码。\n</small>","child":0,"next":136},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":136,"CreatedAt":"2022-07-08T08:40:51.229Z","UpdatedAt":"2022-07-08T08:40:51.229Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 1. docker container start 简介\n\n启动容器，通过`docker container start`命令调用，该流程在运行容器时也会执行。\n\n详见官方文档： https://docs.docker.com/engine/reference/commandline/container_start/","child":0,"next":139},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":139,"CreatedAt":"2022-07-08T09:03:07.061Z","UpdatedAt":"2022-07-08T09:03:07.061Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 2. 源码入口位置\n由cli接收`docker container start`命令参数,发送至docker engine api","child":140,"next":142},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":140,"CreatedAt":"2022-07-08T09:04:52.873Z","UpdatedAt":"2022-07-08T09:04:52.873Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"cli\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L29\n\n```go\nfunc NewStartCommand(dockerCli command.Cli) *cobra.Command {\n    ...\n}\n```","child":0,"next":141}],[{"ID":142,"CreatedAt":"2022-07-08T09:06:34.249Z","UpdatedAt":"2022-07-08T09:06:34.249Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 3. cli\ndocker使用 `github.com/spf13/cobra` 实现cli功能，`NewStartCommand`函数中定义了`cobra.Command`。该函数中用户输入的参数经`cobra`解析后，会被传给`runStart`函数。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L38\n\n```go\nfunc NewStartCommand(dockerCli command.Cli) *cobra.Command {\n    ...\n    cmd := &cobra.Command{\n        ...\n        RunE: func(cmd *cobra.Command, args []string) error {\n            opts.containers = args\n            return runStart(dockerCli, &opts)\n        },\n    }\n    ...\n}\n```","child":143,"next":156},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":143,"CreatedAt":"2022-07-08T09:06:59.399Z","UpdatedAt":"2022-07-08T09:06:59.399Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 3.1 attach\n\n如果参数中指定了`--attach`或`--interactive`, 则需要将容器的STDOUT/STDERR，或STDIN \"attach\"到当前shell。","child":144,"next":154},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":144,"CreatedAt":"2022-07-08T09:07:23.191Z","UpdatedAt":"2022-07-08T09:07:23.191Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 3.1.1 确保只有一个容器\n\n因为要`attach`容器, 所以需要确认要启动的只有一个容器。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L64-L66\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        // We're going to attach to a container.\n        // 1. Ensure we only have one container.\n        if len(opts.containers) > 1 {\n            return errors.New(\"you cannot start and attach multiple containers at once\")\n        }\n        ...\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        ...\n    }\n    return nil\n}\n```","child":0,"next":145},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":141,"CreatedAt":"2022-07-08T09:05:18.19Z","UpdatedAt":"2022-07-08T09:05:18.19Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"engine\n\nhttps://github.com/moby/moby/blob/v20.10.14/api/server/router/container/container.go#L54\n\n```go\nfunc (r *containerRouter) initRoutes() {\n    r.routes = []router.Route{\n        ...\n        router.NewPostRoute(\"/containers/{name:.*}/start\", r.postContainersStart),\n        ...\n    }\n}\n```","child":0,"next":0}],[{"ID":156,"CreatedAt":"2022-07-08T09:38:09.868Z","UpdatedAt":"2022-07-08T09:38:09.868Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 4. dockerd api\n\napi `/containers/{CONTAINERID}/start` 对应 `r.postContainersStart`方法。\n\nhttps://github.com/moby/moby/blob/v20.10.14/api/server/router/container/container.go#L54\n\n```go\nfunc (r *containerRouter) initRoutes() {\n    r.routes = []router.Route{\n        ...\n        router.NewPostRoute(\"/containers/{name:.*}/start\", r.postContainersStart),\n        ...\n    }\n}\n```","child":157,"next":241},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":157,"CreatedAt":"2022-07-08T09:38:24.376Z","UpdatedAt":"2022-07-08T09:38:24.376Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/api/server/router/container/container_routes.go#L210\n\n```go\nfunc (s *containerRouter) postContainersStart(ctx context.Context, w http.ResponseWriter, r *http.Request, vars map[string]string) error {\n    ...\n    if err := s.backend.ContainerStart(vars[\"name\"], hostConfig, checkpoint, checkpointDir); err != nil {\n        return err\n    }\n    ...\n}\n```","child":158,"next":0},{"ID":158,"CreatedAt":"2022-07-08T09:42:55.664Z","UpdatedAt":"2022-07-08T09:42:55.664Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 4.1 `Daemon.ContainerStart`\n\n跟进到`Daemon.ContainerStart`方法，该方法封装了`Daemon.containerStart`方法，作为Backend的实现，供api调用。\n\n该方法内容较长，下面我们依次走读一下。","child":159,"next":0},{"ID":159,"CreatedAt":"2022-07-08T09:43:24.258Z","UpdatedAt":"2022-07-08T09:43:24.258Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"根据客户端提供的容器名称找到容器对象。\n\n容器名称参数可以是：\n1. 容器完整ID\n2. 容器完整名称\n3. 容器部分ID\n\n`Daemon.GetContainer`会按照上述顺序依次查找对应的容器对象。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L17\n\n```go\nfunc (daemon *Daemon) ContainerStart(name string, hostConfig *containertypes.HostConfig, checkpoint string, checkpointDir string) error {\n    ...\n    ctr, err := daemon.GetContainer(name)\n    if err != nil {\n        return err\n    }\n    ...\n}\n```","child":160,"next":161},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":160,"CreatedAt":"2022-07-08T09:44:41.037Z","UpdatedAt":"2022-07-08T09:44:41.037Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/container.go#L38\n\n```go\nfunc (daemon *Daemon) GetContainer(prefixOrName string) (*container.Container, error) {\n    ...\n    if containerByID := daemon.containers.Get(prefixOrName); containerByID != nil {\n        return containerByID, nil\n    }\n    if containerByName, _ := daemon.GetByName(prefixOrName); containerByName != nil {\n        return containerByName, nil\n    }\n    containerID, indexError := daemon.idIndex.Get(prefixOrName)\n    ...\n    return daemon.containers.Get(containerID), nil\n}\n```","child":0,"next":0},{"ID":154,"CreatedAt":"2022-07-08T09:16:54.889Z","UpdatedAt":"2022-07-15T07:56:41.505Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 3.2 未attach，设置了checkpoint\n\n设置了checkpoint，也要求待启动容器只能有一个。因为checkpoint是与容器绑定的。\n\nhttps://github.com/docker/cli/blob/master/cli/command/container/start.go#L178-L188\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n    } else if opts.checkpoint != \"\" {\n        if len(opts.containers) > 1 {\n            return errors.New(\"you cannot restore multiple containers at once\")\n        }\n        container := opts.containers[0]\n        startOptions := types.ContainerStartOptions{\n            CheckpointID:  opts.checkpoint,\n            CheckpointDir: opts.checkpointDir,\n        }\n        return dockerCli.Client().ContainerStart(ctx, container, startOptions)\n    } else {\n        ...\n    }\n    return nil\n}\n```","child":305,"next":155},{"ID":0,"markdown":""},{"ID":305,"CreatedAt":"2022-07-15T07:57:00.951Z","UpdatedAt":"2022-07-15T07:57:00.951Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用docker engine `/containers/{CONTAINERID}/start`。\n\n```go\nfunc (cli *Client) ContainerStart(ctx context.Context, containerID string, options types.ContainerStartOptions) error {\n    query := url.Values{}\n    if len(options.CheckpointID) != 0 {\n        query.Set(\"checkpoint\", options.CheckpointID)\n    }\n    if len(options.CheckpointDir) != 0 {\n        query.Set(\"checkpoint-dir\", options.CheckpointDir)\n    }\n\n    resp, err := cli.post(ctx, \"/containers/\"+containerID+\"/start\", query, nil, nil)\n    ...\n}\n```","child":0,"next":0},{"ID":145,"CreatedAt":"2022-07-08T09:09:25.921Z","UpdatedAt":"2022-07-08T09:11:55.058Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 3.1.2 attach","child":146,"next":149},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":146,"CreatedAt":"2022-07-08T09:09:55.492Z","UpdatedAt":"2022-07-08T09:11:39.738Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用docker inspect api, 判断容器的配置中有无设置`tty`选项。如果没有，将信号直接发给容器。其中，inspect部分的分析详见[docker container inspect 源码分析](https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8/%E8%BF%9B%E7%A8%8B%E5%AE%B9%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8/docker/docker%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-container/docker-container-inspect-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html)。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L69-L80\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n        // 2. Attach to the container.\n        container := opts.containers[0]\n        c, err := dockerCli.Client().ContainerInspect(ctx, container)\n        if err != nil {\n            return err\n        }\n\n        // We always use c.ID instead of container to maintain consistency during `docker start`\n        if !c.Config.Tty {\n            sigc := notfiyAllSignals()\n            go ForwardAllSignals(ctx, dockerCli, c.ID, sigc)\n            defer signal.StopCatch(sigc)\n        }\n        ...\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        ...\n    }\n    return nil\n}\n```","child":0,"next":147},{"ID":0,"markdown":""}],[{"ID":241,"CreatedAt":"2022-07-13T08:12:01.977Z","UpdatedAt":"2022-07-13T08:12:01.977Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 5. containerd \n\n本文中，docker通过以下函数作为客户端调用了containerd api。下文将分析这些函数，直到跟踪到调用containerd api的具体接口地址。","child":242,"next":0},{"ID":242,"CreatedAt":"2022-07-13T08:12:28.258Z","UpdatedAt":"2022-07-13T08:12:28.258Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 5.1 daemon.containerd.Create\n\ndocker在容器启动时，调用`daemon.containerd.Create`方法。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L181\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    err = daemon.containerd.Create(ctx, container.ID, spec, shim, createOptions)\n    ...\n}\n```","child":243,"next":252},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":243,"CreatedAt":"2022-07-13T08:13:05.784Z","UpdatedAt":"2022-07-13T08:40:03.719Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用containerd api前，添加一些适配选项。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L131-L139\n\n```go\nfunc (c *client) Create(ctx context.Context, id string, ociSpec *specs.Spec, shim string, runtimeOptions interface{}, opts ...containerd.NewContainerOpts) error {\n    bdir := c.bundleDir(id)\n    ...\n    newOpts := []containerd.NewContainerOpts{\n        containerd.WithSpec(ociSpec),\n        containerd.WithRuntime(shim, runtimeOptions),\n        WithBundle(bdir, ociSpec),\n    }\n    opts = append(opts, newOpts...)\n    ...\n}\n```","child":244,"next":247},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":244,"CreatedAt":"2022-07-13T08:13:42.784Z","UpdatedAt":"2022-07-13T08:17:46.727Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"将oci配置序列化。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/container_opts.go#L256\n\n```go\nfunc WithSpec(s *oci.Spec, opts ...oci.SpecOpts) NewContainerOpts {\n    return func(ctx context.Context, client *Client, c *containers.Container) error {\n        ...\n        c.Spec, err = typeurl.MarshalAny(s)\n        return err\n    }\n}\n```","child":0,"next":245},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":161,"CreatedAt":"2022-07-08T09:45:03.161Z","UpdatedAt":"2022-07-08T09:45:03.161Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"校验容器状态，如果容器处在Paused, Running, RemovalInProgress, Dead状态，则返回错误。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L27-L43\n\n```go\nfunc (daemon *Daemon) ContainerStart(name string, hostConfig *containertypes.HostConfig, checkpoint string, checkpointDir string) error {\n    ...\n    validateState := func() error {\n        ctr.Lock()\n        defer ctr.Unlock()\n\n        if ctr.Paused {\n            return errdefs.Conflict(errors.New(\"cannot start a paused container, try unpause instead\"))\n        }\n\n        if ctr.Running {\n            return containerNotModifiedError{running: true}\n        }\n\n        if ctr.RemovalInProgress || ctr.Dead {\n            return errdefs.Conflict(errors.New(\"container is marked for removal and cannot be started\"))\n        }\n        return nil\n    }\n    if err := validateState(); err != nil {\n        return err\n    }\n    ...\n}\n```","child":0,"next":162},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":155,"CreatedAt":"2022-07-08T09:17:05.32Z","UpdatedAt":"2022-07-15T08:02:40.826Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 3.3 未attach, 也未设置checkpoint\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L178\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        return startContainersWithoutAttachments(ctx, dockerCli, opts.containers)\n    }\n    return nil\n}\n```","child":306,"next":0},{"ID":306,"CreatedAt":"2022-07-15T08:03:11.198Z","UpdatedAt":"2022-07-15T08:03:11.198Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用docker engine API。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L184\n\n```go\nfunc startContainersWithoutAttachments(ctx context.Context, dockerCli command.Cli, containers []string) error {\n    ...\n    for _, container := range containers {\n        if err := dockerCli.Client().ContainerStart(ctx, container, types.ContainerStartOptions{}); err != nil {\n            ...\n            continue\n        }\n        ...\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":149,"CreatedAt":"2022-07-08T09:13:11.111Z","UpdatedAt":"2022-07-08T09:13:11.111Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 3.1.3 等待容器退出或删除\n\n等待容器退出或删除，退出或被删除后`statusChan`将收到信号。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L130-L134\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n        // 3. We should open a channel for receiving status code of the container\n        // no matter it's detached, removed on daemon side(--rm) or exit normally.\n        statusChan := waitExitOrRemoved(ctx, dockerCli, c.ID, c.HostConfig.AutoRemove)\n        startOptions := types.ContainerStartOptions{\n            CheckpointID:  opts.checkpoint,\n            CheckpointDir: opts.checkpointDir,\n        }\n        ...\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        ...\n    }\n    return nil\n}\n```","child":150,"next":151},{"ID":0,"markdown":""},{"ID":150,"CreatedAt":"2022-07-08T09:13:32.144Z","UpdatedAt":"2022-07-08T09:13:32.144Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`waitExitOrRemoved`函数会调用多个api，相关api的分析详见：\n\n* [docker events](https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8/%E8%BF%9B%E7%A8%8B%E5%AE%B9%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8/docker/docker%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-events-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html)\n* [docker container remove](https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8/%E8%BF%9B%E7%A8%8B%E5%AE%B9%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8/docker/docker%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-container/docker-container-remove-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html)\n* [docker container wait](https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8/%E8%BF%9B%E7%A8%8B%E5%AE%B9%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8/docker/docker%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-container/docker-container-wait-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html)\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/utils.go#L16\n\n```go\nfunc waitExitOrRemoved(ctx context.Context, dockerCli command.Cli, containerID string, waitRemove bool) <-chan int {\n    if len(containerID) == 0 {\n        // containerID can never be empty\n        panic(\"Internal Error: waitExitOrRemoved needs a containerID as parameter\")\n    }\n\n    // Older versions used the Events API, and even older versions did not\n    // support server-side removal. This legacyWaitExitOrRemoved method\n    // preserves that old behavior and any issues it may have.\n    if versions.LessThan(dockerCli.Client().ClientVersion(), \"1.30\") {\n        return legacyWaitExitOrRemoved(ctx, dockerCli, containerID, waitRemove)\n    }\n\n    condition := container.WaitConditionNextExit\n    if waitRemove {\n        condition = container.WaitConditionRemoved\n    }\n\n    resultC, errC := dockerCli.Client().ContainerWait(ctx, containerID, condition)\n\n    statusC := make(chan int)\n    go func() {\n        select {\n        case result := <-resultC:\n            if result.Error != nil {\n                logrus.Errorf(\"Error waiting for container: %v\", result.Error.Message)\n                statusC <- 125\n            } else {\n                statusC <- int(result.StatusCode)\n            }\n        case err := <-errC:\n            logrus.Errorf(\"error waiting for container: %v\", err)\n            statusC <- 125\n        }\n    }()\n\n    return statusC\n}\n```\n","child":0,"next":0},{"ID":147,"CreatedAt":"2022-07-08T09:11:17.857Z","UpdatedAt":"2022-07-08T09:11:17.857Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"覆盖detach按键。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L82-L84\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n        if opts.detachKeys != \"\" {\n            dockerCli.ConfigFile().DetachKeys = opts.detachKeys\n        }\n        ...\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        ...\n    }\n    return nil\n}\n```\n","child":0,"next":148},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":252,"CreatedAt":"2022-07-13T09:50:56.4Z","UpdatedAt":"2022-07-14T02:57:32.751Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 5.2 daemon.containerd.DeleteTask\n\n在调用`daemon.containerd.Create()`时，可能因为上一次containerd退出时未清理容器，导致名称冲突错误，则分别调用`daemon.containerd.DeleteTask()`,`daemon.containerd.Delete()`, 然后再尝试一次`daemon.containerd.Create()`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L179-L195\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    err = daemon.containerd.Create(ctx, container.ID, spec, shim, createOptions)\n    if err != nil {\n        if errdefs.IsConflict(err) {\n            logrus.WithError(err).WithField(\"container\", container.ID).Error(\"Container not cleaned up from containerd from previous run\")\n            // best effort to clean up old container object\n            daemon.containerd.DeleteTask(ctx, container.ID)\n            if err := daemon.containerd.Delete(ctx, container.ID); err != nil && !errdefs.IsNotFound(err) {\n                logrus.WithError(err).WithField(\"container\", container.ID).Error(\"Error cleaning up stale containerd container object\")\n            }\n            err = daemon.containerd.Create(ctx, container.ID, spec, shim, createOptions)\n        }\n        if err != nil {\n            return translateContainerdStartErr(container.Path, container.SetExitCode, err)\n        }\n    }\n    ...\n}\n```","child":253,"next":263},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":253,"CreatedAt":"2022-07-13T09:51:40.893Z","UpdatedAt":"2022-07-14T02:27:43.637Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"删除容器init进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L459\n\n```go\nfunc (c *client) DeleteTask(ctx context.Context, containerID string) (uint32, time.Time, error) {\n    p, err := c.getProcess(ctx, containerID, libcontainerdtypes.InitProcessName)\n    ...\n    status, err := p.Delete(ctx)\n    ...\n}\n```","child":254,"next":0},{"ID":254,"CreatedAt":"2022-07-13T09:55:10.265Z","UpdatedAt":"2022-07-14T02:28:18.94Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"根据容器ID查询容器，返回容器当前进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L604\n\n```go\nfunc (c *client) getProcess(ctx context.Context, containerID, processID string) (containerd.Process, error) {\n    ctr, err := c.getContainer(ctx, containerID)\n    if err != nil {\n        return nil, err\n    }\n    t, err := ctr.Task(ctx, nil)\n    if err != nil {\n        ...\n    }\n    if processID == libcontainerdtypes.InitProcessName {\n        return t, nil\n    }\n    ...\n}\n```","child":255,"next":259},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":255,"CreatedAt":"2022-07-14T02:28:41.753Z","UpdatedAt":"2022-07-14T02:28:41.753Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L593\n\n```go\nfunc (c *client) getContainer(ctx context.Context, id string) (containerd.Container, error) {\n    ctr, err := c.client.LoadContainer(ctx, id)\n    ...\n    return ctr, nil\n}\n```","child":256,"next":0},{"ID":256,"CreatedAt":"2022-07-14T02:29:03.494Z","UpdatedAt":"2022-07-14T02:29:03.494Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/client.go#L289\n\n```go\nfunc (c *Client) LoadContainer(ctx context.Context, id string) (Container, error) {\n    r, err := c.ContainerService().Get(ctx, id)\n    ...\n    return containerFromRecord(c, r), nil\n}\n```\n","child":257,"next":0},{"ID":257,"CreatedAt":"2022-07-14T02:29:38.165Z","UpdatedAt":"2022-07-14T02:29:38.165Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/containerstore.go#L45\n\n```go\nfunc (r *remoteContainers) Get(ctx context.Context, id string) (containers.Container, error) {\n    resp, err := r.client.Get(ctx, &containersapi.GetContainerRequest{\n        ID: id,\n    })\n    ...\n    return containerFromProto(&resp.Container), nil\n}\n```","child":258,"next":0},{"ID":258,"CreatedAt":"2022-07-14T02:29:53.739Z","UpdatedAt":"2022-07-14T02:29:53.739Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用containerd API查询容器，API接口的地址为`/containerd.services.containers.v1.Containers/Get`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go#L679\n\n```go\nfunc (c *containersClient) Get(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error) {\n    out := new(GetContainerResponse)\n    err := c.cc.Invoke(ctx, \"/containerd.services.containers.v1.Containers/Get\", in, out, opts...)\n    if err != nil {\n        return nil, err\n    }\n    return out, nil\n}\n```","child":0,"next":0},{"ID":247,"CreatedAt":"2022-07-13T08:14:51.152Z","UpdatedAt":"2022-07-13T08:46:35.826Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用containerd提供的客户端代码，创建containerd语境下的容器。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L141\n\n```go\nfunc (c *client) Create(ctx context.Context, id string, ociSpec *specs.Spec, shim string, runtimeOptions interface{}, opts ...containerd.NewContainerOpts) error {\n    ...\n    _, err := c.client.NewContainer(ctx, id, opts...)\n    ...\n}\n```","child":248,"next":0},{"ID":248,"CreatedAt":"2022-07-13T08:50:15.632Z","UpdatedAt":"2022-07-13T08:50:15.632Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"应用docker创建的适配选项，调用containerd API创建容器。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/client.go#L263\n\n```go\nfunc (c *Client) NewContainer(ctx context.Context, id string, opts ...NewContainerOpts) (Container, error) {\n    ...\n    container := containers.Container{\n        ID: id,\n        Runtime: containers.RuntimeInfo{\n            Name: c.runtime,\n        },\n    }\n    for _, o := range opts {\n        if err := o(ctx, c, &container); err != nil {\n            return nil, err\n        }\n    }\n    r, err := c.ContainerService().Create(ctx, container)\n    if err != nil {\n        return nil, err\n    }\n    return containerFromRecord(c, r), nil\n}\n```","child":249,"next":0},{"ID":249,"CreatedAt":"2022-07-13T09:04:49.839Z","UpdatedAt":"2022-07-13T09:04:49.839Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/client.go#L577\n\n```go\nfunc (c *Client) ContainerService() containers.Store {\n    ...\n    return NewRemoteContainerStore(containersapi.NewContainersClient(c.conn))\n}\n```","child":0,"next":250},{"ID":0,"markdown":""},{"ID":245,"CreatedAt":"2022-07-13T08:14:05.674Z","UpdatedAt":"2022-07-13T08:18:21.241Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"将runtime选项序列化。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/container_opts.go#L52\n\n```go\nfunc WithRuntime(name string, options interface{}) NewContainerOpts {\n    return func(ctx context.Context, client *Client, c *containers.Container) error {\n        ...\n        if options != nil {\n            any, err = typeurl.MarshalAny(options)\n            if err != nil {\n                return err\n            }\n        }\n        c.Runtime = containers.RuntimeInfo{\n            Name:    name,\n            Options: any,\n        }\n        return nil\n    }\n}\n```","child":0,"next":246},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":162,"CreatedAt":"2022-07-08T09:45:40.914Z","UpdatedAt":"2022-07-08T09:45:40.914Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"在调用start api时，可以通过body传递容器的HostConfig, 不过当前版本(v20.10.14)docker cli不传递请求体。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L50-L93\n\n```go\nfunc (daemon *Daemon) ContainerStart(name string, hostConfig *containertypes.HostConfig, checkpoint string, checkpointDir string) error {\n    ...\n    // Windows does not have the backwards compatibility issue here.\n    if runtime.GOOS != \"windows\" {\n        // This is kept for backward compatibility - hostconfig should be passed when\n        // creating a container, not during start.\n        if hostConfig != nil {\n            logrus.Warn(\"DEPRECATED: Setting host configuration options when the container starts is deprecated and has been removed in Docker 1.12\")\n            oldNetworkMode := ctr.HostConfig.NetworkMode\n            if err := daemon.setSecurityOptions(ctr, hostConfig); err != nil {\n                return errdefs.InvalidParameter(err)\n            }\n            if err := daemon.mergeAndVerifyLogConfig(&hostConfig.LogConfig); err != nil {\n                return errdefs.InvalidParameter(err)\n            }\n            if err := daemon.setHostConfig(ctr, hostConfig); err != nil {\n                return errdefs.InvalidParameter(err)\n            }\n            newNetworkMode := ctr.HostConfig.NetworkMode\n            if string(oldNetworkMode) != string(newNetworkMode) {\n                // if user has change the network mode on starting, clean up the\n                // old networks. It is a deprecated feature and has been removed in Docker 1.12\n                ctr.NetworkSettings.Networks = nil\n                if err := ctr.CheckpointTo(daemon.containersReplica); err != nil {\n                    return errdefs.System(err)\n                }\n            }\n            ctr.InitDNSHostConfig()\n        }\n    }\n    ...\n    // check if hostConfig is in line with the current system settings.\n    // It may happen cgroups are umounted or the like.\n    if _, err = daemon.verifyContainerSettings(ctr.OS, ctr.HostConfig, nil, false); err != nil {\n        return errdefs.InvalidParameter(err)\n    }\n    // Adapt for old containers in case we have updates in this function and\n    // old containers never have chance to call the new function in create stage.\n    if hostConfig != nil {\n        if err := daemon.adaptContainerSettings(ctr.HostConfig, false); err != nil {\n            return errdefs.InvalidParameter(err)\n        }\n    }\n    ...\n}\n```","child":0,"next":163},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":151,"CreatedAt":"2022-07-08T09:15:42.851Z","UpdatedAt":"2022-07-08T09:15:42.851Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 3.1.4 启动容器\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L136-L145\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n        // 4. Start the container.\n        if err := dockerCli.Client().ContainerStart(ctx, c.ID, startOptions); err != nil {\n            cancelFun()\n            <-cErr\n            if c.HostConfig.AutoRemove {\n                // wait container to be removed\n                <-statusChan\n            }\n            return err\n        }\n        ...\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        ...\n    }\n    return nil\n}\n```","child":152,"next":153},{"ID":152,"CreatedAt":"2022-07-08T09:15:57.348Z","UpdatedAt":"2022-07-08T09:15:57.348Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用docker engine `/containers/{CONTAINERID}/start`\n\nhttps://github.com/docker/cli/blob/v20.10.14/vendor/github.com/docker/docker/client/container_start.go#L11\n\n```go\nfunc (cli *Client) ContainerStart(ctx context.Context, containerID string, options types.ContainerStartOptions) error {\n    query := url.Values{}\n    if len(options.CheckpointID) != 0 {\n        query.Set(\"checkpoint\", options.CheckpointID)\n    }\n    if len(options.CheckpointDir) != 0 {\n        query.Set(\"checkpoint-dir\", options.CheckpointDir)\n    }\n\n    resp, err := cli.post(ctx, \"/containers/\"+containerID+\"/start\", query, nil, nil)\n    ensureReaderClosed(resp)\n    return err\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":148,"CreatedAt":"2022-07-08T09:12:27.612Z","UpdatedAt":"2022-07-08T09:12:27.612Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用docker container attach api 实现attach，详细内容参见[docker container attach 源码分析](https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8/%E8%BF%9B%E7%A8%8B%E5%AE%B9%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8/docker/docker%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-container/docker-container-attach-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html)。\n\n调用attach api后，将io流绑定到std上。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L86-L104\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n        options := types.ContainerAttachOptions{\n            Stream:     true,\n            Stdin:      opts.openStdin && c.Config.OpenStdin,\n            Stdout:     true,\n            Stderr:     true,\n            DetachKeys: dockerCli.ConfigFile().DetachKeys,\n        }\n\n        var in io.ReadCloser\n\n        if options.Stdin {\n            in = dockerCli.In()\n        }\n\n        resp, errAttach := dockerCli.Client().ContainerAttach(ctx, c.ID, options)\n        if errAttach != nil {\n            return errAttach\n        }\n        defer resp.Close()\n        \n        cErr := make(chan error, 1)\n\n        go func() {\n            cErr <- func() error {\n                streamer := hijackedIOStreamer{\n                    streams:      dockerCli,\n                    inputStream:  in,\n                    outputStream: dockerCli.Out(),\n                    errorStream:  dockerCli.Err(),\n                    resp:         resp,\n                    tty:          c.Config.Tty,\n                    detachKeys:   options.DetachKeys,\n                }\n\n                errHijack := streamer.stream(ctx)\n                if errHijack == nil {\n                    return errAttach\n                }\n                return errHijack\n            }()\n        }()\n        ...\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        ...\n    }\n    return nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":263,"CreatedAt":"2022-07-14T02:59:39.932Z","UpdatedAt":"2022-07-14T03:29:20.632Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 5.3 daemon.containerd.Delete","child":264,"next":270},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":264,"CreatedAt":"2022-07-14T03:29:32.562Z","UpdatedAt":"2022-07-14T03:29:32.562Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"在调用`daemon.containerd.Create()`时，可能因为上一次containerd退出时未清理容器，导致名称冲突错误，则分别调用`daemon.containerd.DeleteTask()`,`daemon.containerd.Delete()`, 然后再尝试一次`daemon.containerd.Create()`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L179-L195\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    err = daemon.containerd.Create(ctx, container.ID, spec, shim, createOptions)\n    if err != nil {\n        if errdefs.IsConflict(err) {\n            logrus.WithError(err).WithField(\"container\", container.ID).Error(\"Container not cleaned up from containerd from previous run\")\n            // best effort to clean up old container object\n            daemon.containerd.DeleteTask(ctx, container.ID)\n            if err := daemon.containerd.Delete(ctx, container.ID); err != nil && !errdefs.IsNotFound(err) {\n                logrus.WithError(err).WithField(\"container\", container.ID).Error(\"Error cleaning up stale containerd container object\")\n            }\n            err = daemon.containerd.Create(ctx, container.ID, spec, shim, createOptions)\n        }\n        if err != nil {\n            return translateContainerdStartErr(container.Path, container.SetExitCode, err)\n        }\n    }\n    ...\n}\n```\n","child":266,"next":265},{"ID":266,"CreatedAt":"2022-07-14T03:30:03.215Z","UpdatedAt":"2022-07-14T03:30:03.215Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"根据容器ID查询容器，调用容器的Delete方法删除容器、删除bundle目录。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L472\n\n```go\nfunc (c *client) Delete(ctx context.Context, containerID string) error {\n    ctr, err := c.getContainer(ctx, containerID)\n    if err != nil {\n        return err\n    }\n    labels, err := ctr.Labels(ctx)\n    if err != nil {\n        return err\n    }\n    bundle := labels[DockerContainerBundlePath]\n    if err := ctr.Delete(ctx); err != nil {\n        return wrapError(err)\n    }\n    c.oomMu.Lock()\n    delete(c.oom, containerID)\n    c.oomMu.Unlock()\n    c.v2runcoptionsMu.Lock()\n    delete(c.v2runcoptions, containerID)\n    c.v2runcoptionsMu.Unlock()\n    if os.Getenv(\"LIBCONTAINERD_NOCLEAN\") != \"1\" {\n        if err := os.RemoveAll(bundle); err != nil {\n            c.logger.WithError(err).WithFields(logrus.Fields{\n                \"container\": containerID,\n                \"bundle\":    bundle,\n            }).Error(\"failed to remove state dir\")\n        }\n    }\n    return nil\n}\n```","child":267,"next":0},{"ID":267,"CreatedAt":"2022-07-14T03:30:14.688Z","UpdatedAt":"2022-07-14T03:30:14.688Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L482\n\n```go\nfunc (c *container) Delete(ctx context.Context, opts ...DeleteOpts) error {\n    if _, err := c.loadTask(ctx, nil); err == nil {\n        return errors.Wrapf(errdefs.ErrFailedPrecondition, \"cannot delete running task %v\", c.id)\n    }\n    ...\n    return c.client.ContainerService().Delete(ctx, c.id)\n}\n```","child":268,"next":0},{"ID":268,"CreatedAt":"2022-07-14T03:30:35.677Z","UpdatedAt":"2022-07-14T03:30:35.677Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/containerstore.go#L141\n\n```go\nfunc (r *remoteContainers) Delete(ctx context.Context, id string) error {\n    _, err := r.client.Delete(ctx, &containersapi.DeleteContainerRequest{\n        ID: id,\n    })\n    ...\n}\n```","child":269,"next":0},{"ID":269,"CreatedAt":"2022-07-14T03:30:53.66Z","UpdatedAt":"2022-07-14T03:30:53.66Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"删除容器的API接口地址为`/containerd.services.containers.v1.Containers/Delete`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go#L747\n\n```go\nfunc (c *containersClient) Delete(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*types.Empty, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.containers.v1.Containers/Delete\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":259,"CreatedAt":"2022-07-14T02:52:56.348Z","UpdatedAt":"2022-07-14T02:58:23.148Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"查询任务状态，要求任务状态必须是停止的。然后调用containerd API删除进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/task.go#L296\n\n```go\nfunc (t *task) Delete(ctx context.Context, opts ...ProcessDeleteOpts) (*ExitStatus, error) {\n    ...\n    status, err := t.Status(ctx)\n    ...\n    switch status.Status {\n    case Stopped, Unknown, \"\":\n    case Created:\n        ...\n        fallthrough\n    default:\n        return nil, errors.Wrapf(errdefs.ErrFailedPrecondition, \"task must be stopped before deletion: %s\", status.Status)\n    }\n    ...\n    r, err := t.client.TaskService().Delete(ctx, &tasks.DeleteTaskRequest{\n        ContainerID: t.id,\n    })\n    ...\n}\n```","child":260,"next":0},{"ID":260,"CreatedAt":"2022-07-14T02:53:21.084Z","UpdatedAt":"2022-07-14T02:53:21.084Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/task.go#L258\n\n```go\nfunc (t *task) Status(ctx context.Context) (Status, error) {\n\tr, err := t.client.TaskService().Get(ctx, &tasks.GetRequest{\n\t\tContainerID: t.id,\n\t})\n    ...\n}\n```","child":261,"next":262},{"ID":261,"CreatedAt":"2022-07-14T02:53:50.419Z","UpdatedAt":"2022-07-14T02:58:35.452Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"查询任务状态的API接口地址为`/containerd.services.tasks.v1.Tasks/Get`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1336\n\n```go\nfunc (c *tasksClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/Get\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":250,"CreatedAt":"2022-07-13T09:05:15.369Z","UpdatedAt":"2022-07-13T09:05:15.369Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/containerstore.go#L109\n\n```go\nfunc (r *remoteContainers) Create(ctx context.Context, container containers.Container) (containers.Container, error) {\n    created, err := r.client.Create(ctx, &containersapi.CreateContainerRequest{\n        Container: containerToProto(&container),\n    })\n    ...\n}\n```","child":251,"next":0},{"ID":251,"CreatedAt":"2022-07-13T09:10:27.087Z","UpdatedAt":"2022-07-13T09:10:27.087Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用containerd API，API接口为`/containerd.services.containers.v1.Containers/Create`，API具体实现本文不再跟踪，将在分析containerd源码时详细介绍。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go#L729\n\n```go\nfunc (c *containersClient) Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {\n    out := new(CreateContainerResponse)\n    err := c.cc.Invoke(ctx, \"/containerd.services.containers.v1.Containers/Create\", in, out, opts...)\n    if err != nil {\n        return nil, err\n    }\n    return out, nil\n}\n```","child":0,"next":0},{"ID":246,"CreatedAt":"2022-07-13T08:14:27.603Z","UpdatedAt":"2022-07-13T08:34:48.251Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建bundle目录，默认路径为`/var/run/docker/containerd/{CONTAINER_ID}`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client_linux.go#L61\n\n```go\nfunc WithBundle(bundleDir string, ociSpec *specs.Spec) containerd.NewContainerOpts {\n    return func(ctx context.Context, client *containerd.Client, c *containers.Container) error {\n        if c.Labels == nil {\n            c.Labels = make(map[string]string)\n        }\n        uid, gid := getSpecUser(ociSpec)\n        if uid == 0 && gid == 0 {\n            c.Labels[DockerContainerBundlePath] = bundleDir\n            return idtools.MkdirAllAndChownNew(bundleDir, 0755, idtools.Identity{UID: 0, GID: 0})\n        }\n\n        p := string(filepath.Separator)\n        components := strings.Split(bundleDir, string(filepath.Separator))\n        for _, d := range components[1:] {\n            p = filepath.Join(p, d)\n            fi, err := os.Stat(p)\n            if err != nil && !os.IsNotExist(err) {\n                return err\n            }\n            if os.IsNotExist(err) || fi.Mode()&1 == 0 {\n                p = fmt.Sprintf(\"%s.%d.%d\", p, uid, gid)\n                if err := idtools.MkdirAndChown(p, 0700, idtools.Identity{UID: uid, GID: gid}); err != nil && !os.IsExist(err) {\n                    return err\n                }\n            }\n        }\n        if c.Labels == nil {\n            c.Labels = make(map[string]string)\n        }\n        c.Labels[DockerContainerBundlePath] = p\n        return nil\n    }\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":163,"CreatedAt":"2022-07-08T09:46:01.838Z","UpdatedAt":"2022-07-08T09:46:01.838Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用`Daemon.containerStart`方法。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L94\n\n```go\nfunc (daemon *Daemon) ContainerStart(name string, hostConfig *containertypes.HostConfig, checkpoint string, checkpointDir string) error {\n    ...\n    return daemon.containerStart(ctr, checkpoint, checkpointDir, true)\n}\n```","child":164,"next":0},{"ID":164,"CreatedAt":"2022-07-08T09:46:16.595Z","UpdatedAt":"2022-07-08T09:46:16.595Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 4.2 `Daemon.containerStart`\n\n`Daemon.containerStart`方法实际处理容器启动。\n\n该方法内容较长，下面我们依次走读一下。","child":165,"next":0},{"ID":165,"CreatedAt":"2022-07-08T09:46:40.013Z","UpdatedAt":"2022-07-08T09:46:40.013Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.1 checkpointDir \n\n可以看到，尽管docker cli中已经有了checkpointDir参数，但该功能在daemon中还未被支持。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L114-L117\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    if checkpointDir != \"\" {\n        // TODO(mlaventure): how would we support that?\n        return errdefs.Forbidden(errors.New(\"custom checkpointdir is not supported\"))\n    }\n    ...\n}\n```","child":0,"next":166},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":153,"CreatedAt":"2022-07-08T09:16:36.059Z","UpdatedAt":"2022-07-08T09:16:36.059Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 3.1.5 等待attach退出\n\n接收管道消息，即等待attach退出。\n\nhttps://github.com/docker/cli/blob/v20.10.14/cli/command/container/start.go#L148-L163\n\n```go\nfunc runStart(dockerCli command.Cli, opts *startOptions) error {\n    ...\n    if opts.attach || opts.openStdin {\n        ...\n        // 5. Wait for attachment to break.\n        ...\n        if attachErr := <-cErr; attachErr != nil {\n            if _, ok := attachErr.(term.EscapeError); ok {\n                // The user entered the detach escape sequence.\n                return nil\n            }\n            return attachErr\n        }\n\n        if status := <-statusChan; status != 0 {\n            return cli.StatusError{StatusCode: status}\n        }\n    } else if opts.checkpoint != \"\" {\n        ...\n    } else {\n        ...\n    }\n\n    return nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":270,"CreatedAt":"2022-07-14T08:16:59.551Z","UpdatedAt":"2022-07-14T08:16:59.551Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 5.4 daemon.containerd.Start\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L198\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    pid, err := daemon.containerd.Start(context.Background(), container.ID, checkpointDir,\n        container.StreamConfig.Stdin() != nil || container.Config.Tty,\n        container.InitializeStdio)\n    ...\n}\n```","child":271,"next":289},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":271,"CreatedAt":"2022-07-14T08:44:33.038Z","UpdatedAt":"2022-07-15T02:41:18.607Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 5.4.1 checkpoint\n\n如果指定了checkpoint，则将checkpoint目录下的文件打包。待容器启动后，再删除打包好的内容。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L169-L191\n\n```go\nfunc (c *client) Start(ctx context.Context, id, checkpointDir string, withStdin bool, attachStdio libcontainerdtypes.StdioCallback) (int, error) {\n    ...\n    if checkpointDir != \"\" {\n        // write checkpoint to the content store\n        tar := archive.Diff(ctx, \"\", checkpointDir)\n        cp, err = c.writeContent(ctx, images.MediaTypeContainerd1Checkpoint, checkpointDir, tar)\n        // remove the checkpoint when we're done\n        defer func() {\n            if cp != nil {\n                err := c.client.ContentStore().Delete(context.Background(), cp.Digest)\n                ...\n            }\n        }()\n        ...\n    }\n    ...\n    taskOpts := []containerd.NewTaskOpts{\n        func(_ context.Context, _ *containerd.Client, info *containerd.TaskInfo) error {\n            info.Checkpoint = cp\n            return nil\n        },\n    }\n    ...\n}\n```","child":272,"next":278},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":272,"CreatedAt":"2022-07-14T08:50:03.858Z","UpdatedAt":"2022-07-14T09:07:14.425Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`Diff()`函数返回两个目录之间差别的tar包。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/archive/tar.go#L52\n\n```go\nfunc Diff(ctx context.Context, a, b string) io.ReadCloser {\n\tr, w := io.Pipe()\n\tgo func() {\n\t\terr := WriteDiff(ctx, w, a, b)\n        ...\n\t}()\n\treturn r\n}\n```","child":273,"next":275},{"ID":273,"CreatedAt":"2022-07-14T08:50:36.414Z","UpdatedAt":"2022-07-14T09:39:41.289Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/archive/tar.go#L72\n\n```go\nfunc WriteDiff(ctx context.Context, w io.Writer, a, b string) error {\n    cw := newChangeWriter(w, b)\n    err := fs.Changes(ctx, a, b, cw.HandleChange)\n    ...\n}\n```","child":276,"next":0},{"ID":276,"CreatedAt":"2022-07-14T09:39:12.772Z","UpdatedAt":"2022-07-14T09:39:12.772Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/continuity/fs/diff.go#L104\n\n```go\nfunc Changes(ctx context.Context, a, b string, changeFn ChangeFunc) error {\n    if a == \"\" {\n        logrus.Debugf(\"Using single walk diff for %s\", b)\n        return addDirChanges(ctx, changeFn, b)\n    }\n    ...\n}\n```","child":277,"next":0},{"ID":277,"CreatedAt":"2022-07-14T09:40:11.765Z","UpdatedAt":"2022-07-14T09:40:11.765Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"遍历目录下的文件，执行`changeFn`，将文件添加到tar包中。这里`changeFn`就是`changeWriter.HandleChange`方法。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/continuity/fs/diff.go#L114\n\n```go\nfunc addDirChanges(ctx context.Context, changeFn ChangeFunc, root string) error {\n    return filepath.Walk(root, func(path string, f os.FileInfo, err error) error {\n        if err != nil {\n            return err\n        }\n\n        // Rebase path\n        path, err = filepath.Rel(root, path)\n        if err != nil {\n            return err\n        }\n\n        path = filepath.Join(string(os.PathSeparator), path)\n\n        // Skip root\n        if path == string(os.PathSeparator) {\n            return nil\n        }\n\n        return changeFn(ChangeKindAdd, path, f, nil)\n    })\n}\n```","child":0,"next":0},{"ID":265,"CreatedAt":"2022-07-14T03:29:43.203Z","UpdatedAt":"2022-07-14T03:29:43.203Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"也可能在调用`daemon.containerd.Start`启动容器失败后，调用`daemon.containerd.Delete`清理容器。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L202\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    pid, err := daemon.containerd.Start(context.Background(), container.ID, checkpointDir,\n        container.StreamConfig.Stdin() != nil || container.Config.Tty,\n        container.InitializeStdio)\n    if err != nil {\n        if err := daemon.containerd.Delete(context.Background(), container.ID); err != nil {\n            ...\n        }\n        ...\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":262,"CreatedAt":"2022-07-14T02:54:09.102Z","UpdatedAt":"2022-07-14T02:58:47.443Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"删除任务的API接口地址为`/containerd.services.tasks.v1.Tasks/Delete`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1318\n\n```go\nfunc (c *tasksClient) Delete(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {\n\t...\n\terr := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/Delete\", in, out, opts...)\n\t...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":166,"CreatedAt":"2022-07-08T09:46:54.872Z","UpdatedAt":"2022-07-08T09:46:54.872Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.2 遇到错误清理容器\n\n预埋一个defer函数，在`Daemon.containerStart`方法结束前，如果有报错，统一在这个函数里做一些清理工作，使得容器恢复到可以再次被启动的状态。\n\n`Daemon.Cleanup`方法将释放分配给容器的网络资源，以及卸载容器文件系统。该方法也会在`Daemon.handleContainerExit`方法中被调用（即处理容器退出事件时）。\n\n`daemon.ContainerRm`方法在配置自动删除容器选项时被调用，用于删除容器。该方法在执行`docker container rm`时也会被调用，本文不对该方法进行分析。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L121-L143\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    defer func() {\n        if err != nil {\n            container.SetError(err)\n            // if no one else has set it, make sure we don't leave it at zero\n            if container.ExitCode() == 0 {\n                container.SetExitCode(128)\n            }\n            if err := container.CheckpointTo(daemon.containersReplica); err != nil {\n                logrus.Errorf(\"%s: failed saving state on start failure: %v\", container.ID, err)\n            }\n            container.Reset(false)\n\n            daemon.Cleanup(container)\n            // if containers AutoRemove flag is set, remove it after clean up\n            if container.HostConfig.AutoRemove {\n                container.Unlock()\n                if err := daemon.ContainerRm(container.ID, &types.ContainerRmConfig{ForceRemove: true, RemoveVolume: true}); err != nil {\n                    logrus.Errorf(\"can't remove container %s: %v\", container.ID, err)\n                }\n                container.Lock()\n            }\n        }\n    }()\n    ...\n}\n```","child":167,"next":186},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":167,"CreatedAt":"2022-07-08T09:47:15.809Z","UpdatedAt":"2022-07-08T09:47:15.809Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`daemon.releaseNetwork`方法释放与容器连接的相关网络资源(libnetwork.sandbox,libnetwork.Network), 清除容器网络配置。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L229\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    daemon.releaseNetwork(container)\n    ...\n}\n```","child":168,"next":169},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":168,"CreatedAt":"2022-07-08T09:47:33.746Z","UpdatedAt":"2022-07-08T09:47:33.746Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/container_operations.go#L1012\n\n```go\nfunc (daemon *Daemon) releaseNetwork(container *container.Container) {\n    ...\n    settings := container.NetworkSettings.Networks\n    container.NetworkSettings.Ports = nil\n    ...\n    var networks []libnetwork.Network\n    for n, epSettings := range settings {\n        ...\n        cleanOperationalData(epSettings)\n    }\n\n    sb, err := daemon.netController.SandboxByID(sid)\n    ...\n    if err := sb.Delete(); err != nil {\n        logrus.Errorf(\"Error deleting sandbox id %s for container %s: %v\", sid, container.ID, err)\n    }\n\n    for _, nw := range networks {\n        daemon.tryDetachContainerFromClusterNetwork(nw, container)\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":289,"CreatedAt":"2022-07-15T06:42:38.802Z","UpdatedAt":"2022-07-15T06:42:38.802Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 5.5 daemon.containerdCli.LoadContainer\n\n在多处被使用，用于查询containerd容器对象。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/client.go#L289\n\n```go\nfunc (c *Client) LoadContainer(ctx context.Context, id string) (Container, error) {\n    r, err := c.ContainerService().Get(ctx, id)\n    ...\n}\n```","child":290,"next":292},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":290,"CreatedAt":"2022-07-15T06:42:51.451Z","UpdatedAt":"2022-07-15T06:42:51.451Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/containerstore.go#L45\n\n```go\nfunc (r *remoteContainers) Get(ctx context.Context, id string) (containers.Container, error) {\n    resp, err := r.client.Get(ctx, &containersapi.GetContainerRequest{\n        ID: id,\n    })\n    ...\n}\n```","child":291,"next":0},{"ID":291,"CreatedAt":"2022-07-15T06:43:24.394Z","UpdatedAt":"2022-07-15T06:43:24.394Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"对应的containerd api接口地址为`/containerd.services.containers.v1.Containers/Get`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go#L679\n\n```go\nfunc (c *containersClient) Get(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.containers.v1.Containers/Get\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":278,"CreatedAt":"2022-07-15T02:47:58.629Z","UpdatedAt":"2022-07-15T02:47:58.629Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 5.4.2 创建任务选项\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L193-L231\n\n```go\nfunc (c *client) Start(ctx context.Context, id, checkpointDir string, withStdin bool, attachStdio libcontainerdtypes.StdioCallback) (int, error) {\n    ctr, err := c.getContainer(ctx, id)\n    ...\n    spec, err := ctr.Spec(ctx)\n    ...\n    uid, gid := getSpecUser(spec)\n\n    taskOpts := []containerd.NewTaskOpts{\n        func(_ context.Context, _ *containerd.Client, info *containerd.TaskInfo) error {\n            info.Checkpoint = cp\n            return nil\n        },\n    }\n\n    if runtime.GOOS != \"windows\" {\n        taskOpts = append(taskOpts, func(_ context.Context, _ *containerd.Client, info *containerd.TaskInfo) error {\n            c.v2runcoptionsMu.Lock()\n            opts, ok := c.v2runcoptions[id]\n            c.v2runcoptionsMu.Unlock()\n            if ok {\n                opts.IoUid = uint32(uid)\n                opts.IoGid = uint32(gid)\n                info.Options = &opts\n            } else {\n                info.Options = &runctypes.CreateOptions{\n                    IoUid:       uint32(uid),\n                    IoGid:       uint32(gid),\n                    NoPivotRoot: os.Getenv(\"DOCKER_RAMDISK\") != \"\",\n                }\n            }\n            return nil\n        })\n    } else {\n        ...\n    }\n    ...\n}\n```","child":0,"next":279},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":275,"CreatedAt":"2022-07-14T09:08:08.533Z","UpdatedAt":"2022-07-14T09:08:08.533Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"将tar包写入ContentStore。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L892\n\n```go\nfunc (c *client) writeContent(ctx context.Context, mediaType, ref string, r io.Reader) (*types.Descriptor, error) {\n    writer, err := c.client.ContentStore().Writer(ctx, content.WithRef(ref))\n    if err != nil {\n        return nil, err\n    }\n    defer writer.Close()\n    size, err := io.Copy(writer, r)\n    if err != nil {\n        return nil, err\n    }\n    labels := map[string]string{\n        \"containerd.io/gc.root\": time.Now().UTC().Format(time.RFC3339),\n    }\n    if err := writer.Commit(ctx, 0, \"\", content.WithLabels(labels)); err != nil {\n        return nil, err\n    }\n    return &types.Descriptor{\n        MediaType: mediaType,\n        Digest:    writer.Digest(),\n        Size_:     size,\n    }, nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":186,"CreatedAt":"2022-07-08T09:53:12.965Z","UpdatedAt":"2022-07-08T09:53:12.965Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.3 挂载容器rootfs\n\n挂载容器的rootfs。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L145\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    if err := daemon.conditionalMountOnStart(container); err != nil {\n        return err\n    }\n    ...\n}\n```","child":187,"next":196},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":187,"CreatedAt":"2022-07-08T09:53:24.644Z","UpdatedAt":"2022-07-08T09:53:24.644Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/daemon_unix.go#L1359\n\n```go\nfunc (daemon *Daemon) conditionalMountOnStart(container *container.Container) error {\n    return daemon.Mount(container)\n}\n```","child":188,"next":0},{"ID":188,"CreatedAt":"2022-07-08T09:53:36.314Z","UpdatedAt":"2022-07-08T09:53:36.314Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/daemon.go#L1316\n\n```go\nfunc (daemon *Daemon) Mount(container *container.Container) error {\n    if container.RWLayer == nil {\n        return errors.New(\"RWLayer of container \" + container.ID + \" is unexpectedly nil\")\n    }\n    dir, err := container.RWLayer.Mount(container.GetMountLabel())\n    if err != nil {\n        return err\n    }\n    ...\n    container.BaseFS = dir // TODO: combine these fields\n    return nil\n}\n```","child":189,"next":0},{"ID":189,"CreatedAt":"2022-07-08T09:54:05.68Z","UpdatedAt":"2022-07-08T09:54:05.68Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"具体的挂载由graphDriver实现。例如overlay2驱动挂载的路径将返回形如 `/var/lib/docker/overlay2/${LayerID}/merged`的rootfs路径。\n\n下文我仅以overlay2为例，展开分析，至于其他类型的驱动，可在未来针对graphDriver进行源码分析时进行。\n\nhttps://github.com/moby/moby/blob/v20.10.14/layer/mounted_layer.go#L103\n\n```go\nfunc (rl *referencedRWLayer) Mount(mountLabel string) (containerfs.ContainerFS, error) {\n    return rl.layerStore.driver.Get(rl.mountedLayer.mountID, mountLabel)\n}\n```","child":0,"next":190},{"ID":0,"markdown":""},{"ID":169,"CreatedAt":"2022-07-08T09:47:50.825Z","UpdatedAt":"2022-07-08T09:47:50.825Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`Container.UnmountIpcMount`方法用于卸载shm。\n\n共享了IPC的容器会在容器的“工作目录”创建shm文件，供其他容器挂载。\n\n例如，使用`docker run -ti -d --ipc=shareable ubuntu`命令创建的容器，将存在形如`/var/lib/docker/containers/{ContainerID}/mounts/shm`的挂载点。\n\n而`Container.UnmountIpcMount`方法，就是用于卸载上述挂载点。但如果容器中存在主动挂载至`/dev/shm`的情况(例如`docker run -v test:/dev/shm`)时，则不会卸载。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L231-L233\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ...\n    if err := container.UnmountIpcMount(); err != nil {\n        logrus.Warnf(\"%s cleanup: failed to unmount IPC: %s\", container.ID, err)\n    }\n    ...\n}\n```","child":170,"next":171},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":170,"CreatedAt":"2022-07-08T09:48:04.434Z","UpdatedAt":"2022-07-08T09:48:04.434Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/container/container_unix.go#L179\n\n```go\nfunc (container *Container) UnmountIpcMount() error {\n\tif container.HasMountFor(\"/dev/shm\") {\n\t\treturn nil\n\t}\n\tshmPath, err := container.ShmResourcePath()\n\t...\n\tif err = mount.Unmount(shmPath); err != nil && !errors.Is(err, os.ErrNotExist) {\n\t\treturn err\n\t}\n\treturn nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":292,"CreatedAt":"2022-07-15T06:59:00.652Z","UpdatedAt":"2022-07-15T06:59:00.652Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 5.6 daemon.containerd.Exec\n\n在`Daemon.ContainerExecStart()`方法中调用`containerd.Exec()`方法, 交由containerd处理exec进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/exec.go#L263-L303\n\n```go\nfunc (daemon *Daemon) ContainerExecStart(ctx context.Context, name string, stdin io.Reader, stdout io.Writer, stderr io.Writer) (err error) {\n    ...    \n    systemPid, err := daemon.containerd.Exec(ctx, c.ID, ec.ID, p, cStdin != nil, ec.InitializeStdio)\n    ...\n}\n```","child":293,"next":301},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":293,"CreatedAt":"2022-07-15T07:00:19.812Z","UpdatedAt":"2022-07-15T07:00:19.812Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"containerd客户端调用`task.Exec()`来在shim端注册exec配置。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L273-L322\n\n```go\nfunc (c *client) Exec(ctx context.Context, containerID, processID string, spec *specs.Process, withStdin bool, attachStdio libcontainerdtypes.StdioCallback) (int, error) {\n    ctr, err := c.getContainer(ctx, containerID)\n    ...\n    t, err := ctr.Task(ctx, nil)\n    if err != nil {\n        ...\n    }\n    ...\n    labels, err := ctr.Labels(ctx)\n    ...\n    fifos := newFIFOSet(labels[DockerContainerBundlePath], processID, withStdin, spec.Terminal)\n    ...\n    p, err = t.Exec(ctx, processID, spec, func(id string) (cio.IO, error) {\n        rio, err = c.createIO(fifos, containerID, processID, stdinCloseSync, attachStdio)\n        return rio, err\n    })\n    ...\n}\n```","child":294,"next":296},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":294,"CreatedAt":"2022-07-15T07:11:33.054Z","UpdatedAt":"2022-07-15T07:11:33.054Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建exec任务。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/task.go#L334\n\n```go\nfunc (t *task) Exec(ctx context.Context, id string, spec *specs.Process, ioCreate cio.Creator) (_ Process, err error) {\n    ...\n    i, err := ioCreate(id)\n    if err != nil {\n        return nil, err\n    }\n    defer func() {\n        if err != nil && i != nil {\n            i.Cancel()\n            i.Close()\n        }\n    }()\n    any, err := typeurl.MarshalAny(spec)\n    if err != nil {\n        return nil, err\n    }\n    cfg := i.Config()\n    request := &tasks.ExecProcessRequest{\n        ContainerID: t.id,\n        ExecID:      id,\n        Terminal:    cfg.Terminal,\n        Stdin:       cfg.Stdin,\n        Stdout:      cfg.Stdout,\n        Stderr:      cfg.Stderr,\n        Spec:        any,\n    }\n    if _, err := t.client.TaskService().Exec(ctx, request); err != nil {\n        i.Cancel()\n        i.Wait()\n        i.Close()\n        return nil, errdefs.FromGRPC(err)\n    }\n    return &process{\n        id:   id,\n        task: t,\n        io:   i,\n    }, nil\n}\n```","child":295,"next":0},{"ID":295,"CreatedAt":"2022-07-15T07:12:29.243Z","UpdatedAt":"2022-07-15T07:12:29.243Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"对应的API接口地址为`/containerd.services.tasks.v1.Tasks/Exec`\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1361\n\n```go\nfunc (c *tasksClient) Exec(ctx context.Context, in *ExecProcessRequest, opts ...grpc.CallOption) (*types1.Empty, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/Exec\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":279,"CreatedAt":"2022-07-15T02:51:50.355Z","UpdatedAt":"2022-07-15T02:51:50.355Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 5.4.3 创建任务\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L233-L241\n\n```go\nfunc (c *client) Start(ctx context.Context, id, checkpointDir string, withStdin bool, attachStdio libcontainerdtypes.StdioCallback) (int, error) {\n    ...\n    labels, err := ctr.Labels(ctx)\n    ...\n    bundle := labels[DockerContainerBundlePath]\n    ...\n    t, err = ctr.NewTask(ctx,\n        func(id string) (cio.IO, error) {\n            fifos := newFIFOSet(bundle, libcontainerdtypes.InitProcessName, withStdin, spec.Process.Terminal)\n\n            rio, err = c.createIO(fifos, id, libcontainerdtypes.InitProcessName, stdinCloseSync, attachStdio)\n            return rio, err\n        },\n        taskOpts...,\n    )\n    ...\n}\n```","child":280,"next":286},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":280,"CreatedAt":"2022-07-15T02:52:42.893Z","UpdatedAt":"2022-07-15T02:52:42.893Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建io，供将要创建的任务使用。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/container.go#L211\n\n```go\nfunc (c *container) NewTask(ctx context.Context, ioCreate cio.Creator, opts ...NewTaskOpts) (_ Task, err error) {\n    i, err := ioCreate(c.id)\n    ...\n    cfg := i.Config()\n    request := &tasks.CreateTaskRequest{\n        ContainerID: c.id,\n        Terminal:    cfg.Terminal,\n        Stdin:       cfg.Stdin,\n        Stdout:      cfg.Stdout,\n        Stderr:      cfg.Stderr,\n    }\n    ...\n}\n```","child":281,"next":283},{"ID":0,"markdown":""},{"ID":281,"CreatedAt":"2022-07-15T03:03:04.152Z","UpdatedAt":"2022-07-15T03:03:04.152Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建io文件路径，路径分别为\n* `/var/run/docker/containerd/{CONTAINER_ID}/init-stdout`\n* `/var/run/docker/containerd/{CONTAINER_ID}/init-stdin`\n* `/var/run/docker/containerd/{CONTAINER_ID}/init-stderr`\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client_linux.go#L99\n\n```go\nfunc newFIFOSet(bundleDir, processID string, withStdin, withTerminal bool) *cio.FIFOSet {\n    config := cio.Config{\n        Terminal: withTerminal,\n        Stdout:   filepath.Join(bundleDir, processID+\"-stdout\"),\n    }\n    paths := []string{config.Stdout}\n\n    if withStdin {\n        config.Stdin = filepath.Join(bundleDir, processID+\"-stdin\")\n        paths = append(paths, config.Stdin)\n    }\n    if !withTerminal {\n        config.Stderr = filepath.Join(bundleDir, processID+\"-stderr\")\n        paths = append(paths, config.Stderr)\n    }\n    closer := func() error {\n        for _, path := range paths {\n            if err := os.RemoveAll(path); err != nil {\n                logrus.Warnf(\"libcontainerd: failed to remove fifo %v: %v\", path, err)\n            }\n        }\n        return nil\n    }\n\n    return cio.NewFIFOSet(config, closer)\n}\n```","child":0,"next":282},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":196,"CreatedAt":"2022-07-08T09:57:14.878Z","UpdatedAt":"2022-07-08T09:57:14.878Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.4 初始化容器网络\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L149\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    if err := daemon.initializeNetworking(container); err != nil {\n        return err\n    }\n    ...\n}\n```\n","child":197,"next":205},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":197,"CreatedAt":"2022-07-08T09:57:36.067Z","UpdatedAt":"2022-07-08T09:57:36.067Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"如果是与其他容器共享网络 (即使用`--network container:{ContainerID}`参数运行容器，参见[官方文档](https://docs.docker.com/engine/reference/run/#network-container)) ,则初始化网络过程较为简单。\n\n因为网络已经存在，找到共享网络的容器，更新hostname等配置即可。然后直接返回，初始化网络流程结束。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/container_operations.go#L958\n\n```go\nfunc (daemon *Daemon) initializeNetworking(container *container.Container) error {\n    var err error\n\n    if container.HostConfig.NetworkMode.IsContainer() {\n        // we need to get the hosts files from the container to join\n        nc, err := daemon.getNetworkedContainer(container.ID, container.HostConfig.NetworkMode.ConnectedContainer())\n        if err != nil {\n            return err\n        }\n\n        err = daemon.initializeNetworkingPaths(container, nc)\n        if err != nil {\n            return err\n        }\n\n        container.Config.Hostname = nc.Config.Hostname\n        container.Config.Domainname = nc.Config.Domainname\n        return nil\n    }\n    ...\n}\n```","child":198,"next":199},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":198,"CreatedAt":"2022-07-08T09:57:52.94Z","UpdatedAt":"2022-07-08T09:57:52.94Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/container_operations_unix.go#L448\n\n```go\nfunc (daemon *Daemon) initializeNetworkingPaths(container *container.Container, nc *container.Container) error {\n    container.HostnamePath = nc.HostnamePath\n    container.HostsPath = nc.HostsPath\n    container.ResolvConfPath = nc.ResolvConfPath\n    return nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":190,"CreatedAt":"2022-07-08T09:54:41.152Z","UpdatedAt":"2022-07-08T09:54:41.152Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"生成调用mount函数将要传入的参数。\n\n* mountData形如 `index=off,lowerdir=/var/lib/docker/overlay2/l/{LowerID}:/var/lib/docker/overlay2/l/{LowerID},upperdir=/var/lib/docker/overlay2/{LayerID}/diff,workdir=/var/lib/docker/overlay2/{LayerID}/work`。\n* mountTarget形如`/var/lib/docker/overlay2/{LayerID}/merged`。\n* 要调用的mount函数即golang对mount系统调用的封装。\n\n其中LowerId是指向相关目录的软链接。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/graphdriver/overlay2/overlay.go#L524\n\n```go\nfunc (d *Driver) Get(id, mountLabel string) (_ containerfs.ContainerFS, retErr error) {\n    ...\n    var opts string\n    if readonly {\n        opts = indexOff + userxattr + \"lowerdir=\" + diffDir + \":\" + strings.Join(absLowers, \":\")\n    } else {\n        opts = indexOff + userxattr + \"lowerdir=\" + strings.Join(absLowers, \":\") + \",upperdir=\" + diffDir + \",workdir=\" + workDir\n    }\n\n    mountData := label.FormatMountLabel(opts, mountLabel)\n    mount := unix.Mount\n    mountTarget := mergedDir\n\n    rootUID, rootGID, err := idtools.GetRootUIDGID(d.uidMaps, d.gidMaps)\n    if err != nil {\n        return nil, err\n    }\n    if err := idtools.MkdirAndChown(mergedDir, 0700, idtools.Identity{UID: rootUID, GID: rootGID}); err != nil {\n        return nil, err\n    }\n    ...\n}\n```","child":0,"next":191},{"ID":0,"markdown":""},{"ID":171,"CreatedAt":"2022-07-08T09:48:23.049Z","UpdatedAt":"2022-07-08T09:48:23.049Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"卸载容器的rootfs。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L235-L241\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ...    \n    if err := daemon.conditionalUnmountOnCleanup(container); err != nil {\n        // FIXME: remove once reference counting for graphdrivers has been refactored\n        // Ensure that all the mounts are gone\n        if mountid, err := daemon.imageService.GetLayerMountID(container.ID, container.OS); err == nil {\n            daemon.cleanupMountsByID(mountid)\n        }\n    }\n    ...\n}\n```","child":172,"next":174},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":172,"CreatedAt":"2022-07-08T09:48:38.625Z","UpdatedAt":"2022-07-08T09:48:38.625Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/daemon_unix.go#L1365\n\n```go\nfunc (daemon *Daemon) conditionalUnmountOnCleanup(container *container.Container) error {\n    return daemon.Unmount(container)\n}\n```","child":173,"next":0},{"ID":173,"CreatedAt":"2022-07-08T09:48:54.315Z","UpdatedAt":"2022-07-08T09:48:54.315Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/daemon.go#L1341\n\n```go\nfunc (daemon *Daemon) Unmount(container *container.Container) error {\n    if container.RWLayer == nil {\n        return errors.New(\"RWLayer of container \" + container.ID + \" is unexpectedly nil\")\n    }\n    if err := container.RWLayer.Unmount(); err != nil {\n        logrus.WithField(\"container\", container.ID).WithError(err).Error(\"error unmounting container\")\n        return err\n    }\n\n    return nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":301,"CreatedAt":"2022-07-15T07:33:47.023Z","UpdatedAt":"2022-07-15T07:33:47.023Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 5.7 daemon.containerd.SignalProcess\n\n调用`containerd.Exec()`方法, 交由containerd处理exec进程。如果超时，调用`daemon.containerd.SignalProcess()`方法kill进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/exec.go#L263-L303\n\n```go\nfunc (daemon *Daemon) ContainerExecStart(ctx context.Context, name string, stdin io.Reader, stdout io.Writer, stderr io.Writer) (err error) {\n    ...    \n    systemPid, err := daemon.containerd.Exec(ctx, c.ID, ec.ID, p, cStdin != nil, ec.InitializeStdio)\n    ...\n    select {\n    case <-ctx.Done():\n        ...\n        daemon.containerd.SignalProcess(ctx, c.ID, name, int(signal.SignalMap[\"TERM\"]))\n        timeout := time.NewTimer(termProcessTimeout)\n        ...\n        select {\n        case <-timeout.C:\n            ...\n            daemon.containerd.SignalProcess(ctx, c.ID, name, int(signal.SignalMap[\"KILL\"]))\n        ...\n        }\n        ...\n    }\n    return nil\n}\n```","child":302,"next":0},{"ID":302,"CreatedAt":"2022-07-15T07:34:00.498Z","UpdatedAt":"2022-07-15T07:34:00.498Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"根据容器ID和进程ID，获取进程对象，调用`process.Kill`方法杀死进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L336\n\n```go\nfunc (c *client) SignalProcess(ctx context.Context, containerID, processID string, signal int) error {\n    p, err := c.getProcess(ctx, containerID, processID)\n    ...\n    return wrapError(p.Kill(ctx, syscall.Signal(signal)))\n}\n```","child":303,"next":0},{"ID":303,"CreatedAt":"2022-07-15T07:34:24.821Z","UpdatedAt":"2022-07-15T07:34:24.821Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`process.Kill`方法调用containerd api\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/process.go#L134\n\n```go\nfunc (p *process) Kill(ctx context.Context, s syscall.Signal, opts ...KillOpts) error {\n    var i KillInfo\n    ...\n    _, err := p.task.client.TaskService().Kill(ctx, &tasks.KillRequest{\n        Signal:      uint32(s),\n        ContainerID: p.task.id,\n        ExecID:      p.id,\n        All:         i.All,\n    })\n    return errdefs.FromGRPC(err)\n}\n```","child":304,"next":0},{"ID":304,"CreatedAt":"2022-07-15T07:34:38.512Z","UpdatedAt":"2022-07-15T07:34:38.512Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"containerd杀死进程的api接口地址为`/containerd.services.tasks.v1.Tasks/Kill`\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1352\n\n```go\nfunc (c *tasksClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*types1.Empty, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/Kill\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":296,"CreatedAt":"2022-07-15T07:24:18.503Z","UpdatedAt":"2022-07-15T07:24:18.503Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用`process.Start`方法启动exec进程, 报错则删除进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L307\n\n```go\nfunc (c *client) Exec(ctx context.Context, containerID, processID string, spec *specs.Process, withStdin bool, attachStdio libcontainerdtypes.StdioCallback) (int, error) {\n    ...\n    if err = p.Start(ctx); err != nil {\n        ...\n        p.Delete(ctx)\n        ...\n    }\n    return int(p.Pid()), nil\n}\n```","child":297,"next":0},{"ID":297,"CreatedAt":"2022-07-15T07:24:42.201Z","UpdatedAt":"2022-07-15T07:24:42.201Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`process.Start`方法调用containerd api启动exec进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/process.go#L117\n\n```go\nfunc (p *process) Start(ctx context.Context) error {\n    r, err := p.task.client.TaskService().Start(ctx, &tasks.StartRequest{\n        ContainerID: p.task.id,\n        ExecID:      p.id,\n    })\n    ...\n    p.pid = r.Pid\n    return nil\n}\n```","child":298,"next":299},{"ID":0,"markdown":""},{"ID":298,"CreatedAt":"2022-07-15T07:25:07.252Z","UpdatedAt":"2022-07-15T07:25:07.252Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"对应的api接口地址为`/containerd.services.tasks.v1.Tasks/Start`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1307\n\n```go\nfunc (c *tasksClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {\n\t...\n    err := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/Start\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":286,"CreatedAt":"2022-07-15T06:24:53.842Z","UpdatedAt":"2022-07-15T06:24:53.842Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 5.4.4 启动任务\n\n启动任务，如果失败则删除任务。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L254-L262\n\n```go\nfunc (c *client) Start(ctx context.Context, id, checkpointDir string, withStdin bool, attachStdio libcontainerdtypes.StdioCallback) (int, error) {\n    ...\n    if err := t.Start(ctx); err != nil {\n        if _, err := t.Delete(ctx); err != nil {\n            c.logger.WithError(err).WithField(\"container\", id).\n                Error(\"failed to delete task after fail start\")\n        }\n        return -1, wrapError(err)\n    }\n    return int(t.Pid()), nil\n}\n```","child":287,"next":0},{"ID":287,"CreatedAt":"2022-07-15T06:25:18.614Z","UpdatedAt":"2022-07-15T06:25:18.614Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/task.go#L209\n\n```go\nfunc (t *task) Start(ctx context.Context) error {\n    r, err := t.client.TaskService().Start(ctx, &tasks.StartRequest{\n        ContainerID: t.id,\n    })\n    ...\n    t.pid = r.Pid\n    return nil\n}\n```","child":288,"next":0},{"ID":288,"CreatedAt":"2022-07-15T06:25:41.948Z","UpdatedAt":"2022-07-15T06:25:41.948Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"启动任务的API接口地址为`/containerd.services.tasks.v1.Tasks/Start`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1307\n\n```go\nfunc (c *tasksClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/Start\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":283,"CreatedAt":"2022-07-15T06:22:56.063Z","UpdatedAt":"2022-07-15T06:22:56.063Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"准备调用containerd api的参数。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/container.go#L222-L265\n\n```go\nfunc (c *container) NewTask(ctx context.Context, ioCreate cio.Creator, opts ...NewTaskOpts) (_ Task, err error) {\n    ...\n    request := &tasks.CreateTaskRequest{\n        ContainerID: c.id,\n        Terminal:    cfg.Terminal,\n        Stdin:       cfg.Stdin,\n        Stdout:      cfg.Stdout,\n        Stderr:      cfg.Stderr,\n    }\n    r, err := c.get(ctx)\n    if err != nil {\n        return nil, err\n    }\n    if r.SnapshotKey != \"\" {\n        ...\n    }\n    info := TaskInfo{\n        runtime: r.Runtime.Name,\n    }\n    for _, o := range opts {\n        if err := o(ctx, c.client, &info); err != nil {\n            return nil, err\n        }\n    }\n    if info.RootFS != nil {\n        ...\n    }\n    if info.Options != nil {\n        any, err := typeurl.MarshalAny(info.Options)\n        if err != nil {\n            return nil, err\n        }\n        request.Options = any\n    }\n    ...\n    if info.Checkpoint != nil {\n        request.Checkpoint = info.Checkpoint\n    }\n    ...\n}\n```","child":0,"next":284},{"ID":0,"markdown":""},{"ID":282,"CreatedAt":"2022-07-15T03:28:22.648Z","UpdatedAt":"2022-07-15T03:28:22.648Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建fifo，并将输出attach到stdout, stderr。\n\nhttps://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L631\n\n```go\nfunc (c *client) createIO(fifos *cio.FIFOSet, containerID, processID string, stdinCloseSync chan struct{}, attachStdio libcontainerdtypes.StdioCallback) (cio.IO, error) {\n    ...\n    io, err = c.newDirectIO(context.Background(), fifos)\n    ...\n    if io.Stdin != nil {\n        ...\n        pipe := io.Stdin\n        io.Stdin = ioutils.NewWriteCloserWrapper(pipe, func() error {\n            stdinOnce.Do(func() {\n                err = pipe.Close()\n                ...\n                go func() {\n                    <-stdinCloseSync\n                    p, err := c.getProcess(context.Background(), containerID, processID)\n                    if err == nil {\n                        err = p.CloseIO(context.Background(), containerd.WithStdinCloser)\n                        ...\n                    }\n                }()\n            })\n            return err\n        })\n    }\n\n    rio, err := attachStdio(io)\n    ...\n    return rio, err\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":205,"CreatedAt":"2022-07-08T10:01:55.473Z","UpdatedAt":"2022-07-08T10:03:29.895Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.5 创建oci配置\n\n创建符合oci标准的容器配置，后续该配置将被传递给oci。考虑到篇幅问题，该流程源码分析可以参见[docker 创建oci运行时配置 源码分析](https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8/%E8%BF%9B%E7%A8%8B%E5%AE%B9%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8/docker/docker%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-container/docker-container-start-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-%E5%88%9B%E5%BB%BAoci%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html)。\n\nhttps://github.com/moby/moby/blob/master/daemon/start.go#L153-L156\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    spec, err := daemon.createSpec(container)\n    if err != nil {\n        return errdefs.System(err)\n    }\n    ...\n}\n```","child":206,"next":207},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":206,"CreatedAt":"2022-07-08T10:03:46.376Z","UpdatedAt":"2022-07-08T10:03:46.376Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/oci_linux.go#L1008\n\n```go\nfunc (daemon *Daemon) createSpec(c *container.Container) (retSpec *specs.Spec, err error) {\n    var (\n        opts []coci.SpecOpts\n        s    = oci.DefaultSpec()\n    )\n    opts = append(opts,\n        WithCommonOptions(daemon, c),\n        WithCgroups(daemon, c),\n        WithResources(c),\n        WithSysctls(c),\n        WithDevices(daemon, c),\n        WithUser(c),\n        WithRlimits(daemon, c),\n        WithNamespaces(daemon, c),\n        WithCapabilities(c),\n        WithSeccomp(daemon, c),\n        WithMounts(daemon, c),\n        WithLibnetwork(daemon, c),\n        WithApparmor(c),\n        WithSelinux(c),\n        WithOOMScore(&c.HostConfig.OomScoreAdj),\n    )\n    if c.NoNewPrivileges {\n        opts = append(opts, coci.WithNoNewPrivileges)\n    }\n\n    // Set the masked and readonly paths with regard to the host config options if they are set.\n    if c.HostConfig.MaskedPaths != nil {\n        opts = append(opts, coci.WithMaskedPaths(c.HostConfig.MaskedPaths))\n    }\n    if c.HostConfig.ReadonlyPaths != nil {\n        opts = append(opts, coci.WithReadonlyPaths(c.HostConfig.ReadonlyPaths))\n    }\n    if daemon.configStore.Rootless {\n        opts = append(opts, WithRootless(daemon))\n    }\n    return &s, coci.ApplyOpts(context.Background(), nil, &containers.Container{\n        ID: c.ID,\n    }, &s, opts...)\n}\n```\n","child":0,"next":0},{"ID":199,"CreatedAt":"2022-07-08T09:58:45.394Z","UpdatedAt":"2022-07-08T09:58:45.394Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"如果是host模式的网络，需要额外配置hostname，并继续执行。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/container_operations_unix.go#L448\n\n```go\nfunc (daemon *Daemon) initializeNetworking(container *container.Container) error {\n    ...\n    if container.HostConfig.NetworkMode.IsHost() {\n        if container.Config.Hostname == \"\" {\n            container.Config.Hostname, err = os.Hostname()\n            if err != nil {\n                return err\n            }\n        }\n    }\n    ...\n}\n```","child":0,"next":200},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":191,"CreatedAt":"2022-07-08T09:55:00.273Z","UpdatedAt":"2022-07-08T09:55:00.273Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"但mount系统调用的data参数有长度限制，只会使用在page size内的mount data。\n\nhttps://elixir.bootlin.com/linux/latest/source/fs/namespace.c#L3224\n\n```clike\nstatic void *copy_mount_options(const void __user * data)\n{\n    char *copy;\n    unsigned left, offset;\n\n    if (!data)\n        return NULL;\n\n    copy = kmalloc(PAGE_SIZE, GFP_KERNEL);\n    if (!copy)\n        return ERR_PTR(-ENOMEM);\n\n    left = copy_from_user(copy, data, PAGE_SIZE);\n\n    /*\n     * Not all architectures have an exact copy_from_user(). Resort to\n     * byte at a time.\n     */\n    offset = PAGE_SIZE - left;\n    while (left) {\n        char c;\n        if (get_user(c, (const char __user *)data + offset))\n            break;\n        copy[offset] = c;\n        left--;\n        offset++;\n    }\n\n    if (left == PAGE_SIZE) {\n        kfree(copy);\n        return ERR_PTR(-EFAULT);\n    }\n\n    return copy;\n}\n```","child":0,"next":192},{"ID":0,"markdown":""},{"ID":174,"CreatedAt":"2022-07-08T09:49:09.166Z","UpdatedAt":"2022-07-08T09:49:09.166Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"使用swarm secrets时，secrets会挂载在`/var/lib/docker/containers/{ContainerID}/mounts/secrets`目录。在清理时，会递归卸载该目录。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L243\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ...\n    if err := container.UnmountSecrets(); err != nil {\n        logrus.Warnf(\"%s cleanup: failed to unmount secrets: %s\", container.ID, err)\n    }\n    ...\n}\n```","child":175,"next":177},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":175,"CreatedAt":"2022-07-08T09:49:23.844Z","UpdatedAt":"2022-07-08T09:49:23.844Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/container/container_unix.go#L255\n\n```go\nfunc (container *Container) UnmountSecrets() error {\n    p, err := container.SecretMountPath()\n    ...\n    return mount.RecursiveUnmount(p)\n}\n```","child":176,"next":0},{"ID":176,"CreatedAt":"2022-07-08T09:49:34.679Z","UpdatedAt":"2022-07-08T09:49:34.679Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/vendor/github.com/moby/sys/mount/mount_unix.go#L43\n\n```go\nfunc RecursiveUnmount(target string) error {\n    if err := unix.Unmount(target, mntDetach); err == nil {\n        return nil\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":299,"CreatedAt":"2022-07-15T07:25:28.306Z","UpdatedAt":"2022-07-15T07:25:28.306Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用containerd api 删除进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/process.go#L201\n\n```go\nfunc (p *process) Delete(ctx context.Context, opts ...ProcessDeleteOpts) (*ExitStatus, error) {\n    ...\n    status, err := p.Status(ctx)\n    ...\n    switch status.Status {\n    case Running, Paused, Pausing:\n        return nil, errors.Wrapf(errdefs.ErrFailedPrecondition, \"process must be stopped before deletion\")\n    }\n    r, err := p.task.client.TaskService().DeleteProcess(ctx, &tasks.DeleteProcessRequest{\n        ContainerID: p.task.id,\n        ExecID:      p.id,\n    })\n    ...\n}\n```","child":300,"next":0},{"ID":300,"CreatedAt":"2022-07-15T07:25:53.443Z","UpdatedAt":"2022-07-15T07:25:53.443Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"删除进程的api接口地址为`/containerd.services.tasks.v1.Tasks/DeleteProcess`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1325\n\n```go\nfunc (c *tasksClient) DeleteProcess(ctx context.Context, in *DeleteProcessRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/DeleteProcess\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":284,"CreatedAt":"2022-07-15T06:23:39.907Z","UpdatedAt":"2022-07-15T06:23:39.907Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建任务\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/container.go#L289-L303\n\n```go\nfunc (c *container) NewTask(ctx context.Context, ioCreate cio.Creator, opts ...NewTaskOpts) (_ Task, err error) {\n    ...\n    t := &task{\n        client: c.client,\n        io:     i,\n        id:     c.id,\n        c:      c,\n    }\n    response, err := c.client.TaskService().Create(ctx, request)\n    ...\n    t.pid = response.Pid\n    return t, nil\n}\n```","child":285,"next":0},{"ID":285,"CreatedAt":"2022-07-15T06:24:02.889Z","UpdatedAt":"2022-07-15T06:24:02.889Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用containerd api，接口地址为`/containerd.services.tasks.v1.Tasks/Create`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go#L1298\n\n```go\nfunc (c *tasksClient) Create(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {\n    ...\n    err := c.cc.Invoke(ctx, \"/containerd.services.tasks.v1.Tasks/Create\", in, out, opts...)\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":207,"CreatedAt":"2022-07-11T07:38:44.014Z","UpdatedAt":"2022-07-11T07:38:44.014Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.6 为容器对象保存apparmor配置\n\n尽管在`docker create`和本文`4.2.5 创建oci配置`节中，已经处理过apparmor配置，但`container.Container.AppArmorProfile`字段可能为空值。这里[为了在docker inspect时显示`docker-default`](https://github.com/moby/moby/pull/27083)，再解析和更新一次apparmor配置。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L163-L165\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    if err := daemon.saveAppArmorConfig(container); err != nil {\n        return err\n    }\n    ...\n}\n```\n","child":0,"next":208},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":200,"CreatedAt":"2022-07-08T09:59:09.121Z","UpdatedAt":"2022-07-08T09:59:09.121Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用 `daemon.allocateNetwork`，创建并连接至网络。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/container_operations.go#L987\n\n```go\nfunc (daemon *Daemon) initializeNetworking(container *container.Container) error {\n    ...\n    if err := daemon.allocateNetwork(container); err != nil {\n        return err\n    }\n    ...\n}\n```","child":201,"next":203},{"ID":0,"markdown":""},{"ID":201,"CreatedAt":"2022-07-08T09:59:31.706Z","UpdatedAt":"2022-07-08T09:59:31.706Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建sandbox, endpoint, 连接至容器网络。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/container_operations.go#L559-L605\n\n```go\nfunc (daemon *Daemon) allocateNetwork(container *container.Container) (retErr error) {\n    ...\n    defaultNetName := runconfig.DefaultDaemonNetworkMode().NetworkName()\n    if nConf, ok := container.NetworkSettings.Networks[defaultNetName]; ok {\n        cleanOperationalData(nConf)\n        if err := daemon.connectToNetwork(container, defaultNetName, nConf.EndpointSettings, updateSettings); err != nil {\n            return err\n        }\n\n    }\n\n    // the intermediate map is necessary because \"connectToNetwork\" modifies \"container.NetworkSettings.Networks\"\n    networks := make(map[string]*network.EndpointSettings)\n    for n, epConf := range container.NetworkSettings.Networks {\n        if n == defaultNetName {\n            continue\n        }\n\n        networks[n] = epConf\n    }\n\n    for netName, epConf := range networks {\n        cleanOperationalData(epConf)\n        if err := daemon.connectToNetwork(container, netName, epConf.EndpointSettings, updateSettings); err != nil {\n            return err\n        }\n    }\n\n    // If the container is not to be connected to any network,\n    // create its network sandbox now if not present\n    if len(networks) == 0 {\n        if nil == daemon.getNetworkSandbox(container) {\n            sbOptions, err := daemon.buildSandboxOptions(container)\n            if err != nil {\n                return err\n            }\n            sb, err := daemon.netController.NewSandbox(container.ID, sbOptions...)\n            if err != nil {\n                return err\n            }\n            updateSandboxNetworkSettings(container, sb)\n            defer func() {\n                if retErr != nil {\n                    sb.Delete()\n                }\n            }()\n        }\n\n    }\n    ...\n}\n```","child":0,"next":202},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":192,"CreatedAt":"2022-07-08T09:56:00.547Z","UpdatedAt":"2022-07-08T09:56:00.547Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"因为有page size的限制，所以docker才使用会使用“lower目录”，通过较短的软链接替代较长的路径。常见情况下，已经不需要考虑page size的边界问题。\n\n如果mount data长度超过了page size, 则可以使用相对路径以减少长度。\n\n如果还是超出了长度，则报错。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/graphdriver/overlay2/overlay.go#L592-L613\n\n```go\nfunc (d *Driver) Get(id, mountLabel string) (_ containerfs.ContainerFS, retErr error) {\n    ...\n    pageSize := unix.Getpagesize()\n\n    // Use relative paths and mountFrom when the mount data has exceeded\n    // the page size. The mount syscall fails if the mount data cannot\n    // fit within a page and relative links make the mount data much\n    // smaller at the expense of requiring a fork exec to chroot.\n    if len(mountData) > pageSize-1 {\n        if readonly {\n            opts = indexOff + userxattr + \"lowerdir=\" + path.Join(id, diffDirName) + \":\" + string(lowers)\n        } else {\n            opts = indexOff + userxattr + \"lowerdir=\" + string(lowers) + \",upperdir=\" + path.Join(id, diffDirName) + \",workdir=\" + path.Join(id, workDirName)\n        }\n        mountData = label.FormatMountLabel(opts, mountLabel)\n        if len(mountData) > pageSize-1 {\n            return nil, fmt.Errorf(\"cannot mount layer, mount label too large %d\", len(mountData))\n        }\n\n        mount = func(source string, target string, mType string, flags uintptr, label string) error {\n            return mountFrom(d.home, source, target, mType, flags, label)\n        }\n        mountTarget = path.Join(id, mergedDirName)\n    }\n    ...\n}\n```","child":0,"next":193},{"ID":0,"markdown":""},{"ID":177,"CreatedAt":"2022-07-08T09:50:26.522Z","UpdatedAt":"2022-07-08T09:50:26.522Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"递归卸载容器的\"工作目录\", 即`/var/lib/docker/containers/{ContainerID}/`目录。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L247-L249\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ...\n    if err := recursiveUnmount(container.Root); err != nil {\n        logrus.WithError(err).WithField(\"container\", container.ID).Warn(\"Error while cleaning up container resource mounts.\")\n    }\n    ...\n}\n```\n","child":0,"next":178},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":208,"CreatedAt":"2022-07-11T09:18:11.014Z","UpdatedAt":"2022-07-11T09:18:11.014Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.7 checkpoint\n\n获取checkpoint目录。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L167-L172\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    if checkpoint != \"\" {\n        checkpointDir, err = getCheckpointDir(checkpointDir, checkpoint, container.Name, container.ID, container.CheckpointDir(), false)\n        if err != nil {\n            return err\n        }\n    }\n    ...\n}\n```","child":209,"next":210},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":209,"CreatedAt":"2022-07-11T09:25:57.961Z","UpdatedAt":"2022-07-11T09:25:57.961Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"该目录默认形如`/var/lib/docker/containers/{ContainerID}/checkpoints/{checkpoint}`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/checkpoint.go#L20\n\n```go\nfunc getCheckpointDir(checkDir, checkpointID, ctrName, ctrID, ctrCheckpointDir string, create bool) (string, error) {\n    var checkpointDir string\n    var err2 error\n    if checkDir != \"\" {\n        ...\n    } else {\n        checkpointDir = ctrCheckpointDir\n    }\n    checkpointAbsDir := filepath.Join(checkpointDir, checkpointID)\n    stat, err := os.Stat(checkpointAbsDir)\n    if create {\n        ...\n    } else {\n        switch {\n        case err != nil:\n            err2 = fmt.Errorf(\"checkpoint %s does not exist for container %s\", checkpointID, ctrName)\n        case stat.IsDir():\n            err2 = nil\n        default:\n            err2 = fmt.Errorf(\"%s exists and is not a directory\", checkpointAbsDir)\n        }\n    }\n    return checkpointAbsDir, err2\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":203,"CreatedAt":"2022-07-08T10:00:47.61Z","UpdatedAt":"2022-07-08T10:00:47.61Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`Daemon.initializeNetworking`方法最后创建hostname文件。\n\n除了container类型的网络，其他类型都会在容器“工作目录”例如`/var/lib/docker/containers/{ContainerID}`创建hostname文件，并写入容器的hostname。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/container_operations.go#L991\n\n```go\nfunc (daemon *Daemon) initializeNetworking(container *container.Container) error {\n    ...\n    return container.BuildHostnameFile()\n}\n```","child":204,"next":0},{"ID":204,"CreatedAt":"2022-07-08T10:01:00.939Z","UpdatedAt":"2022-07-08T10:01:00.939Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/container/container_unix.go#L54\n\n```go\nfunc (container *Container) BuildHostnameFile() error {\n    hostnamePath, err := container.GetRootResourcePath(\"hostname\")\n    if err != nil {\n        return err\n    }\n    container.HostnamePath = hostnamePath\n    return ioutil.WriteFile(container.HostnamePath, []byte(container.Config.Hostname+\"\\n\"), 0644)\n}\n```\n","child":0,"next":0},{"ID":202,"CreatedAt":"2022-07-08T10:00:07.656Z","UpdatedAt":"2022-07-08T10:00:07.656Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"\n`Daemon.allocateNetwork`方法最后更新HostConfig文件。\n\nhostconfig文件位于`/var/lib/docker/{ContainerID}/hostconfig.json`, 以json格式存储了容器的host配置。\n\n```go\nfunc (daemon *Daemon) allocateNetwork(container *container.Container) (retErr error) {\n    ...    \n    if _, err := container.WriteHostConfig(); err != nil {\n        return err\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":193,"CreatedAt":"2022-07-08T09:56:28.054Z","UpdatedAt":"2022-07-08T09:56:28.054Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"注意到，使用相对路径时，mount函数需要替换成`mountFrom`函数。`mountFrom`函数中实际调用了docker自己实现的命令`docker-mountfrom`。关于该命令的源码分析，我们将在 [docker reexec docker-mountfrom 源码分析](https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8/%E8%BF%9B%E7%A8%8B%E5%AE%B9%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8/docker/docker%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-reexec%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/docker-reexec-docker-mountfrom-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html) 一文中详细展开。该函数的作用是，先chroot到一个目录，然后在该目录中执行mount，即可实现使用相对路径进行mount。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/graphdriver/overlay2/overlay.go#L609\n\n```go\nfunc (d *Driver) Get(id, mountLabel string) (_ containerfs.ContainerFS, retErr error) {\n    ...\n    if len(mountData) > pageSize-1 {\n        ...\n        mount = func(source string, target string, mType string, flags uintptr, label string) error {\n            return mountFrom(d.home, source, target, mType, flags, label)\n        }\n        ...\n    }\n    ...\n}\n```","child":194,"next":195},{"ID":194,"CreatedAt":"2022-07-08T09:56:41.907Z","UpdatedAt":"2022-07-08T09:56:41.907Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/graphdriver/overlay2/mount.go#L34\n\n```go\nfunc mountFrom(dir, device, target, mType string, flags uintptr, label string) error {\n    ...\n    cmd := reexec.Command(\"docker-mountfrom\", dir)\n    w, err := cmd.StdinPipe()\n    if err != nil {\n        return fmt.Errorf(\"mountfrom error on pipe creation: %v\", err)\n    }\n\n    output := bytes.NewBuffer(nil)\n    cmd.Stdout = output\n    cmd.Stderr = output\n    if err := cmd.Start(); err != nil {\n        w.Close()\n        return fmt.Errorf(\"mountfrom error on re-exec cmd: %v\", err)\n    }\n    // write the options to the pipe for the untar exec to read\n    if err := json.NewEncoder(w).Encode(options); err != nil {\n        w.Close()\n        return fmt.Errorf(\"mountfrom json encode to pipe failed: %v\", err)\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":178,"CreatedAt":"2022-07-08T09:50:53.695Z","UpdatedAt":"2022-07-08T09:50:53.695Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"取消注册容器的exec命令。（该命令在执行docker exec或Health Check时被添加）\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L251\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ...\n    for _, eConfig := range container.ExecCommands.Commands() {\n        daemon.unregisterExecCommand(container, eConfig)\n    }\n    ...\n}\n```","child":0,"next":179},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":210,"CreatedAt":"2022-07-11T10:06:43.846Z","UpdatedAt":"2022-07-11T10:06:43.846Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.8 containerd shim路径和选项\n\n获取containerd所需的runtime shim路径和选项。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L174-L177\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    shim, createOptions, err := daemon.getLibcontainerdCreateOptions(container)\n    if err != nil {\n        return err\n    }\n    ...\n}\n```","child":211,"next":222},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":211,"CreatedAt":"2022-07-12T02:55:32.252Z","UpdatedAt":"2022-07-12T02:55:32.252Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`getLibcontainerdCreateOptions()`函数根据HostConfig.Runtime获取对应的runtime, 返回runtime的shim路径和选项。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start_unix.go#L10\n\n```go\nfunc (daemon *Daemon) getLibcontainerdCreateOptions(container *container.Container) (string, interface{}, error) {\n    // Ensure a runtime has been assigned to this container\n    if container.HostConfig.Runtime == \"\" {\n        container.HostConfig.Runtime = daemon.configStore.GetDefaultRuntimeName()\n        container.CheckpointTo(daemon.containersReplica)\n    }\n\n    rt, err := daemon.getRuntime(container.HostConfig.Runtime)\n    if err != nil {\n        return \"\", nil, translateContainerdStartErr(container.Path, container.SetExitCode, err)\n    }\n\n    return rt.Shim.Binary, rt.Shim.Opts, nil\n}\n```","child":212,"next":0},{"ID":212,"CreatedAt":"2022-07-12T02:56:04.776Z","UpdatedAt":"2022-07-12T04:04:41.329Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/runtime_unix.go#L132-L135\n\n```go\nfunc (daemon *Daemon) getRuntime(name string) (*types.Runtime, error) {\n    rt := daemon.configStore.GetRuntime(name)\n    if rt == nil {\n        return nil, errdefs.InvalidParameter(errors.Errorf(\"runtime not found in config: %s\", name))\n    }\n    ...\n}\n```","child":213,"next":219},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":213,"CreatedAt":"2022-07-12T04:04:58.294Z","UpdatedAt":"2022-07-12T04:04:58.294Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"从`conf.Runtimes`中根据名称查询runtime。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/config/config_common_unix.go#L32\n\n```go\nfunc (conf *Config) GetRuntime(name string) *types.Runtime {\n    conf.Lock()\n    defer conf.Unlock()\n    if rt, ok := conf.Runtimes[name]; ok {\n        return &rt\n    }\n    return nil\n}\n```","child":214,"next":0},{"ID":214,"CreatedAt":"2022-07-12T04:05:30.758Z","UpdatedAt":"2022-07-12T04:05:30.758Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"其中`conf.Runtimes`有3个默认配置项，用户也可在dockerd启动参数中额外配置。","child":215,"next":0},{"ID":215,"CreatedAt":"2022-07-12T04:05:50.216Z","UpdatedAt":"2022-07-12T04:05:50.216Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"在dockerd启动时默认配置了`runc`, `io.containerd.runtime.v1.linux`, `io.containerd.runc.v2`3个runtime。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/runtime_unix.go#L24-L41\n\n```go\nconst (\n    defaultRuntimeName = \"runc\"\n    ...\n)\n\nfunc configureRuntimes(conf *config.Config) {\n    if conf.DefaultRuntime == \"\" {\n        conf.DefaultRuntime = config.StockRuntimeName\n    }\n    if conf.Runtimes == nil {\n        conf.Runtimes = make(map[string]types.Runtime)\n    }\n    conf.Runtimes[config.LinuxV1RuntimeName] = types.Runtime{Path: defaultRuntimeName, Shim: defaultV1ShimConfig(conf, defaultRuntimeName)}\n    conf.Runtimes[config.LinuxV2RuntimeName] = types.Runtime{Path: defaultRuntimeName, Shim: defaultV2ShimConfig(conf, defaultRuntimeName)}\n    conf.Runtimes[config.StockRuntimeName] = conf.Runtimes[config.LinuxV2RuntimeName]\n}\n```","child":216,"next":0},{"ID":216,"CreatedAt":"2022-07-12T04:06:05.842Z","UpdatedAt":"2022-07-12T04:06:05.842Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/config/config.go#L50-L56\n\n```go\nconst (\n    ...\n    // StockRuntimeName is the reserved name/alias used to represent the\n    // OCI runtime being shipped with the docker daemon package.\n    StockRuntimeName = \"runc\"\n    // LinuxV1RuntimeName is the runtime used to specify the containerd v1 shim with the runc binary\n    // Note this is different than io.containerd.runc.v1 which would be the v1 shim using the v2 shim API.\n    // This is specifically for the v1 shim using the v1 shim API.\n    LinuxV1RuntimeName = \"io.containerd.runtime.v1.linux\"\n    // LinuxV2RuntimeName is the runtime used to specify the containerd v2 runc shim\n    LinuxV2RuntimeName = \"io.containerd.runc.v2\"\n)\n```","child":0,"next":217},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":195,"CreatedAt":"2022-07-08T09:56:59.137Z","UpdatedAt":"2022-07-08T09:56:59.137Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"最后调用mount函数，挂载rootfs。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/graphdriver/overlay2/overlay.go#L615-L617\n\n```go\nfunc (d *Driver) Get(id, mountLabel string) (_ containerfs.ContainerFS, retErr error) {\n    ...\n    if err := mount(\"overlay\", mountTarget, \"overlay\", 0, mountData); err != nil {\n        return nil, fmt.Errorf(\"error creating overlay mount to %s: %v\", mergedDir, err)\n    }\n\n    if !readonly {\n        // chown \"workdir/work\" to the remapped root UID/GID. Overlay fs inside a\n        // user namespace requires this to move a directory from lower to upper.\n        if err := os.Chown(path.Join(workDir, workDirName), rootUID, rootGID); err != nil {\n            return nil, err\n        }\n    }\n\n    return containerfs.NewLocalContainerFS(mergedDir), nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":179,"CreatedAt":"2022-07-08T09:51:09.71Z","UpdatedAt":"2022-07-08T09:51:09.71Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"卸载容器挂载的卷。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L256\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ... \n    if container.BaseFS != nil && container.BaseFS.Path() != \"\" {\n        if err := container.UnmountVolumes(daemon.LogVolumeEvent); err != nil {\n            logrus.Warnf(\"%s cleanup: Failed to umount volumes: %v\", container.ID, err)\n        }\n    }\n    ...\n}\n```","child":180,"next":182},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":180,"CreatedAt":"2022-07-08T09:51:22.978Z","UpdatedAt":"2022-07-08T09:51:22.978Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/container/container.go#L493\n\n```go\nfunc (container *Container) UnmountVolumes(volumeEventLog func(name, action string, attributes map[string]string)) error {\n    var errors []string\n    for _, volumeMount := range container.MountPoints {\n        if volumeMount.Volume == nil {\n            continue\n        }\n\n        if err := volumeMount.Cleanup(); err != nil {\n            errors = append(errors, err.Error())\n            continue\n        }\n\n        ...\n    }\n    ...\n}\n```","child":181,"next":0},{"ID":181,"CreatedAt":"2022-07-08T09:51:43.395Z","UpdatedAt":"2022-07-08T09:51:43.395Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/volume/mounts/mounts.go#L78\n\n```go\nfunc (m *MountPoint) Cleanup() error {\n    if m.Volume == nil || m.ID == \"\" {\n        return nil\n    }\n\n    if err := m.Volume.Unmount(m.ID); err != nil {\n        return errors.Wrapf(err, \"error unmounting volume %s\", m.Volume.Name())\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":222,"CreatedAt":"2022-07-12T07:43:56.771Z","UpdatedAt":"2022-07-12T07:43:56.771Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.9 调用containerd api\n\n完成准备工作后，docker将准备好的参数传递至containerd API。","child":223,"next":225},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":223,"CreatedAt":"2022-07-12T07:44:12.239Z","UpdatedAt":"2022-07-12T07:44:12.239Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"首先调用`containerd.Create()`，如果是因为`ErrConflict`错误，则分别调用`containerd.DeleteTask()`,`containerd.Delete()`, 然后再尝试一次`containerd.Create()`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L179-L195\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    ctx := context.TODO()\n\n    err = daemon.containerd.Create(ctx, container.ID, spec, shim, createOptions)\n    if err != nil {\n        if errdefs.IsConflict(err) {\n            logrus.WithError(err).WithField(\"container\", container.ID).Error(\"Container not cleaned up from containerd from previous run\")\n            // best effort to clean up old container object\n            daemon.containerd.DeleteTask(ctx, container.ID)\n            if err := daemon.containerd.Delete(ctx, container.ID); err != nil && !errdefs.IsNotFound(err) {\n                logrus.WithError(err).WithField(\"container\", container.ID).Error(\"Error cleaning up stale containerd container object\")\n            }\n            err = daemon.containerd.Create(ctx, container.ID, spec, shim, createOptions)\n        }\n        if err != nil {\n            return translateContainerdStartErr(container.Path, container.SetExitCode, err)\n        }\n    }\n    ...\n}\n```","child":0,"next":224},{"ID":0,"markdown":""},{"ID":219,"CreatedAt":"2022-07-12T06:56:26.334Z","UpdatedAt":"2022-07-12T06:56:26.334Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"containerd API 只会直接调用oci runtime文件，对于指定了额外参数的情况，docker封装了一层脚本，再将脚本传递给containerd API。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/runtime_unix.go#L137-L144\n\n```go\nfunc (daemon *Daemon) getRuntime(name string) (*types.Runtime, error) {\n    ...\n    if len(rt.Args) > 0 {\n        p, err := daemon.rewriteRuntimePath(name, rt.Path, rt.Args)\n        if err != nil {\n            return nil, err\n        }\n        rt.Path = p\n        rt.Args = nil\n    }\n    ...\n}\n```","child":220,"next":0},{"ID":220,"CreatedAt":"2022-07-12T07:07:21.678Z","UpdatedAt":"2022-07-12T07:07:21.678Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`Daemon.rewriteRuntimePath()`方法中将含有参数的runtime路径替换成了`/var/lib/docker/runtimes/{runtime_name}`路径。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/runtime_unix.go#L118\n\n```go\nfunc (daemon *Daemon) rewriteRuntimePath(name, p string, args []string) (string, error) {\n    if len(args) == 0 {\n        return p, nil\n    }\n\n    // Check that the runtime path actually exists here so that we can return a well known error.\n    if _, err := exec.LookPath(p); err != nil {\n        return \"\", errors.Wrap(err, \"error while looking up the specified runtime path\")\n    }\n\n    return filepath.Join(daemon.configStore.Root, \"runtimes\", name), nil\n}\n```","child":221,"next":0},{"ID":221,"CreatedAt":"2022-07-12T07:07:33.615Z","UpdatedAt":"2022-07-12T07:07:33.615Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"该路径在dockerd启动时已被写入为sh脚本。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/runtime_unix.go#L100-L111\n\n```go\nfunc (daemon *Daemon) initRuntimes(runtimes map[string]types.Runtime) (err error) {\n    ...\n    for name, rt := range runtimes {\n        if len(rt.Args) > 0 {\n            script := filepath.Join(tmpDir, name)\n            content := fmt.Sprintf(\"#!/bin/sh\\n%s %s $@\\n\", rt.Path, strings.Join(rt.Args, \" \"))\n            if err := ioutil.WriteFile(script, []byte(content), 0700); err != nil {\n                return err\n            }\n        }\n        if rt.Shim == nil {\n            rt.Shim = defaultV2ShimConfig(daemon.configStore, rt.Path)\n        }\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":217,"CreatedAt":"2022-07-12T06:44:15.175Z","UpdatedAt":"2022-07-12T06:44:15.175Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`io.containerd.runtime.v1.linux`, `io.containerd.runc.v2`对应的shim结构体实现如下，`runc`与`io.containerd.runc.v2`相同。其中runc的root目录默认为`/var/run/docker/runtime-runc`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/runtime_unix.go#L55\n\n```go\nfunc defaultV1ShimConfig(conf *config.Config, runtimePath string) *types.ShimConfig {\n    return &types.ShimConfig{\n        Binary: linuxShimV1,\n        Opts: &runctypes.RuncOptions{\n            Runtime:       runtimePath,\n            RuntimeRoot:   filepath.Join(conf.ExecRoot, \"runtime-\"+defaultRuntimeName),\n            SystemdCgroup: UsingSystemd(conf),\n        },\n    }\n}\n```","child":0,"next":218},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":182,"CreatedAt":"2022-07-08T09:51:56.641Z","UpdatedAt":"2022-07-08T09:51:56.641Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"取消Attach。在attach流程中，会等待至`container.attachContext`结束时detach。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L261\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ... \n    container.CancelAttachContext()\n    ...\n}\n```","child":183,"next":184},{"ID":0,"markdown":""},{"ID":183,"CreatedAt":"2022-07-08T09:52:08.104Z","UpdatedAt":"2022-07-08T09:52:08.104Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/container/container.go#L625\n\n```go\nfunc (container *Container) CancelAttachContext() {\n    container.attachContext.mu.Lock()\n    if container.attachContext.ctx != nil {\n        container.attachContext.cancel()\n        container.attachContext.ctx = nil\n    }\n    container.attachContext.mu.Unlock()\n}\n```\n","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":225,"CreatedAt":"2022-07-12T07:45:00.736Z","UpdatedAt":"2022-07-12T07:45:00.736Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.10 更新容器状态信息\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L209-L211\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    container.SetRunning(pid, true)\n    container.HasBeenStartedBefore = true\n    daemon.setStateCounter(container)\n    ...\n}\n```","child":0,"next":226},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":224,"CreatedAt":"2022-07-12T07:44:30.802Z","UpdatedAt":"2022-07-12T07:44:30.802Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"然后调用`containerd.Start()`, 如果返回错误，则调用`containerd.Delete()`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L198-L207\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    // TODO(mlaventure): we need to specify checkpoint options here\n    pid, err := daemon.containerd.Start(context.Background(), container.ID, checkpointDir,\n        container.StreamConfig.Stdin() != nil || container.Config.Tty,\n        container.InitializeStdio)\n    if err != nil {\n        if err := daemon.containerd.Delete(context.Background(), container.ID); err != nil {\n            logrus.WithError(err).WithField(\"container\", container.ID).\n                Error(\"failed to delete failed start container\")\n        }\n        return translateContainerdStartErr(container.Path, container.SetExitCode, err)\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":218,"CreatedAt":"2022-07-12T06:44:31.409Z","UpdatedAt":"2022-07-12T06:44:31.409Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/runtime_unix.go#L43\n\n```go\nfunc defaultV2ShimConfig(conf *config.Config, runtimePath string) *types.ShimConfig {\n    return &types.ShimConfig{\n        Binary: linuxShimV2,\n        Opts: &v2runcoptions.Options{\n            BinaryName:    runtimePath,\n            Root:          filepath.Join(conf.ExecRoot, \"runtime-\"+defaultRuntimeName),\n            SystemdCgroup: UsingSystemd(conf),\n            NoPivotRoot:   os.Getenv(\"DOCKER_RAMDISK\") != \"\",\n        },\n    }\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":184,"CreatedAt":"2022-07-08T09:52:24.933Z","UpdatedAt":"2022-07-08T09:52:24.933Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"最后，调用containerd删除容器。containerd具体如何删除将在下一章节分析containerd源码时统一分析。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L263\n\n```go\nfunc (daemon *Daemon) Cleanup(container *container.Container) {\n    ... \n    if err := daemon.containerd.Delete(context.Background(), container.ID); err != nil {\n        logrus.Errorf(\"%s cleanup: failed to delete container from containerd: %v\", container.ID, err)\n    }\n}\n```","child":185,"next":0},{"ID":185,"CreatedAt":"2022-07-08T09:52:38.009Z","UpdatedAt":"2022-07-08T09:52:38.009Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/libcontainerd/remote/client.go#L482\n\n```go\nfunc (c *client) Delete(ctx context.Context, containerID string) error {\n    ctr, err := c.getContainer(ctx, containerID)\n    if err != nil {\n        return err\n    }\n    ...\n    if err := ctr.Delete(ctx); err != nil {\n        return wrapError(err)\n    }\n    ...\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":226,"CreatedAt":"2022-07-13T03:52:11.168Z","UpdatedAt":"2022-07-13T03:52:11.168Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.11 HealthCheck\n\n根据容器或镜像中配置的HealthCheck，启动HealthMonitor。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L213\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...\n    daemon.initHealthMonitor(container)\n    ...\n}\n```","child":227,"next":236},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":227,"CreatedAt":"2022-07-13T03:52:30.697Z","UpdatedAt":"2022-07-13T03:52:30.697Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/health.go#L297\n\n```go\nfunc (daemon *Daemon) initHealthMonitor(c *container.Container) {\n    ...\n    daemon.updateHealthMonitor(c)\n}\n```","child":228,"next":0},{"ID":228,"CreatedAt":"2022-07-13T03:52:46.084Z","UpdatedAt":"2022-07-13T03:52:46.084Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/daemon/health.go#L276\n\n```go\nfunc (daemon *Daemon) updateHealthMonitor(c *container.Container) {\n    ...\n    go monitor(daemon, c, stop, probe)\n    ...\n}\n```","child":229,"next":0},{"ID":229,"CreatedAt":"2022-07-13T03:53:19.872Z","UpdatedAt":"2022-07-13T03:53:19.872Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"定时执行`probe.run()`方法。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/health.go#L207\n\n```go\nfunc monitor(d *Daemon, c *container.Container, stop chan struct{}, probe probe) {\n    ...\n    for {\n        ...\n        select {\n        ...\n        case <-intervalTimer.C:\n            ...\n            go func() {\n                ...\n                result, err := probe.run(ctx, d, c)\n                ...\n            }()\n            ...\n        }\n    }\n}\n```","child":230,"next":0},{"ID":230,"CreatedAt":"2022-07-13T03:53:55.307Z","UpdatedAt":"2022-07-13T03:53:55.307Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"封装、注册exec命令。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/health.go#L65-L93\n\n```go\nfunc (p *cmdProbe) run(ctx context.Context, d *Daemon, cntr *container.Container) (*types.HealthcheckResult, error) {\n    cmdSlice := strslice.StrSlice(cntr.Config.Healthcheck.Test)[1:]\n    if p.shell {\n        cmdSlice = append(getShell(cntr), cmdSlice...)\n    }\n    entrypoint, args := d.getEntrypointAndArgs(strslice.StrSlice{}, cmdSlice)\n    execConfig := exec.NewConfig()\n    execConfig.OpenStdin = false\n    execConfig.OpenStdout = true\n    execConfig.OpenStderr = true\n    execConfig.ContainerID = cntr.ID\n    execConfig.DetachKeys = []byte{}\n    execConfig.Entrypoint = entrypoint\n    execConfig.Args = args\n    execConfig.Tty = false\n    execConfig.Privileged = false\n    execConfig.User = cntr.Config.User\n    execConfig.WorkingDir = cntr.Config.WorkingDir\n\n    linkedEnv, err := d.setupLinkedContainers(cntr)\n    if err != nil {\n        return nil, err\n    }\n    execConfig.Env = container.ReplaceOrAppendEnvValues(cntr.CreateDaemonEnvironment(execConfig.Tty, linkedEnv), execConfig.Env)\n\n    d.registerExecCommand(cntr, execConfig)\n    attributes := map[string]string{\n        \"execID\": execConfig.ID,\n    }\n    ...\n}\n```","child":0,"next":231},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":236,"CreatedAt":"2022-07-13T07:02:03.516Z","UpdatedAt":"2022-07-13T07:02:03.516Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"#### 4.2.12 保存容器配置\n\n将容器的当前配置和状态保存在文件和数据库中。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/start.go#L215\n\n```go\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n    ...   \n    if err := container.CheckpointTo(daemon.containersReplica); err != nil {\n        logrus.WithError(err).WithField(\"container\", container.ID).\n            Errorf(\"failed to store container\")\n    }\n    ...\n    return nil\n}\n```","child":237,"next":0},{"ID":237,"CreatedAt":"2022-07-13T07:02:26.809Z","UpdatedAt":"2022-07-13T07:02:26.809Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/moby/moby/blob/v20.10.14/container/container.go#L197\n\n```go\nfunc (container *Container) CheckpointTo(store ViewDB) error {\n    deepCopy, err := container.toDisk()\n    if err != nil {\n        return err\n    }\n    return store.Save(deepCopy)\n}\n```","child":238,"next":0},{"ID":238,"CreatedAt":"2022-07-13T07:02:47.593Z","UpdatedAt":"2022-07-13T07:02:47.593Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"将容器状态和配置保存在`/var/lib/docker/containers/{CONTAINER_ID}/config.v2.json`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/container/container.go#L162\n\n```go\nfunc (container *Container) toDisk() (*Container, error) {\n    var (\n        buf      bytes.Buffer\n        deepCopy Container\n    )\n    pth, err := container.ConfigPath()\n    if err != nil {\n        return nil, err\n    }\n\n    // Save container settings\n    f, err := ioutils.NewAtomicFileWriter(pth, 0600)\n    if err != nil {\n        return nil, err\n    }\n    defer f.Close()\n\n    w := io.MultiWriter(&buf, f)\n    if err := json.NewEncoder(w).Encode(container); err != nil {\n        return nil, err\n    }\n\n    if err := json.NewDecoder(&buf).Decode(&deepCopy); err != nil {\n        return nil, err\n    }\n    deepCopy.HostConfig, err = container.WriteHostConfig()\n    if err != nil {\n        return nil, err\n    }\n\n    return &deepCopy, nil\n}\n```","child":239,"next":240},{"ID":239,"CreatedAt":"2022-07-13T07:03:05.743Z","UpdatedAt":"2022-07-13T07:03:05.743Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"将HostConfig另外保存在`/var/lib/docker/containers/{CONTAINER_ID}/hostconfig.json`。\n\nhttps://github.com/moby/moby/blob/v20.10.14/container/container.go#L236\n\n```go\nfunc (container *Container) WriteHostConfig() (*containertypes.HostConfig, error) {\n    var (\n        buf      bytes.Buffer\n        deepCopy containertypes.HostConfig\n    )\n\n    pth, err := container.HostConfigPath()\n    if err != nil {\n        return nil, err\n    }\n\n    f, err := ioutils.NewAtomicFileWriter(pth, 0644)\n    if err != nil {\n        return nil, err\n    }\n    defer f.Close()\n\n    w := io.MultiWriter(&buf, f)\n    if err := json.NewEncoder(w).Encode(&container.HostConfig); err != nil {\n        return nil, err\n    }\n\n    if err := json.NewDecoder(&buf).Decode(&deepCopy); err != nil {\n        return nil, err\n    }\n    return &deepCopy, nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":231,"CreatedAt":"2022-07-13T03:54:30.737Z","UpdatedAt":"2022-07-13T03:54:30.737Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用`ContainerExecStart`方法，返回执行结果。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/health.go#L95-L113\n\n```go\nfunc (p *cmdProbe) run(ctx context.Context, d *Daemon, cntr *container.Container) (*types.HealthcheckResult, error) {\n    ...\n    output := &limitedBuffer{}\n    err = d.ContainerExecStart(ctx, execConfig.ID, nil, output, output)\n    if err != nil {\n        return nil, err\n    }\n    info, err := d.getExecConfig(execConfig.ID)\n    if err != nil {\n        return nil, err\n    }\n    if info.ExitCode == nil {\n        return nil, fmt.Errorf(\"healthcheck for container %s has no exit code\", cntr.ID)\n    }\n    // Note: Go's json package will handle invalid UTF-8 for us\n    out := output.String()\n    return &types.HealthcheckResult{\n        End:      time.Now(),\n        ExitCode: *info.ExitCode,\n        Output:   out,\n    }, nil\n}\n```","child":232,"next":0},{"ID":232,"CreatedAt":"2022-07-13T03:54:59.973Z","UpdatedAt":"2022-07-13T03:54:59.973Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"`Daemon.ContainerExecStart()`方法在docker exec流程中也会被调用, 本文仅分析本流程涉及的部分代码。","child":0,"next":233},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":240,"CreatedAt":"2022-07-13T07:06:27.926Z","UpdatedAt":"2022-07-13T07:06:27.926Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"将容器状态和配置保存到内存数据库中。\n\nhttps://github.com/moby/moby/blob/v20.10.14/container/view.go#L154\n\n```go\nfunc (db *memDB) Save(c *Container) error {\n    return db.withTxn(func(txn *memdb.Txn) error {\n        return txn.Insert(memdbContainersTable, c)\n    })\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":233,"CreatedAt":"2022-07-13T03:55:22.583Z","UpdatedAt":"2022-07-13T03:55:22.583Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"设置exec进程的参数。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/exec.go#L154-L240\n\n```go\nfunc (daemon *Daemon) ContainerExecStart(ctx context.Context, name string, stdin io.Reader, stdout io.Writer, stderr io.Writer) (err error) {\n    ...\n    ec, err := daemon.getExecConfig(name)\n    ...\n    p := &specs.Process{}\n    if runtime.GOOS != \"windows\" {\n        ctr, err := daemon.containerdCli.LoadContainer(ctx, ec.ContainerID)\n        if err != nil {\n            return err\n        }\n        spec, err := ctr.Spec(ctx)\n        if err != nil {\n            return err\n        }\n        p = spec.Process\n    }\n    p.Args = append([]string{ec.Entrypoint}, ec.Args...)\n    ...\n    if err := daemon.execSetPlatformOpt(c, ec, p); err != nil {\n        return err\n    }\n    ...\n}\n```","child":235,"next":234},{"ID":235,"CreatedAt":"2022-07-13T03:56:05.897Z","UpdatedAt":"2022-07-13T03:56:05.897Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"设置进程的安全选项。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/exec_linux.go#L13\n\n```go\nfunc (daemon *Daemon) execSetPlatformOpt(c *container.Container, ec *exec.Config, p *specs.Process) error {\n    if len(ec.User) > 0 {\n        var err error\n        p.User, err = getUser(c, ec.User)\n        if err != nil {\n            return err\n        }\n    }\n    if ec.Privileged {\n        p.Capabilities = &specs.LinuxCapabilities{\n            Bounding:  caps.GetAllCapabilities(),\n            Permitted: caps.GetAllCapabilities(),\n            Effective: caps.GetAllCapabilities(),\n        }\n    }\n    if apparmor.IsEnabled() {\n        var appArmorProfile string\n        if c.AppArmorProfile != \"\" {\n            appArmorProfile = c.AppArmorProfile\n        } else if c.HostConfig.Privileged {\n            ...\n            appArmorProfile = unconfinedAppArmorProfile\n        } else {\n            appArmorProfile = defaultAppArmorProfile\n        }\n\n        if appArmorProfile == defaultAppArmorProfile {\n            if err := ensureDefaultAppArmorProfile(); err != nil {\n                return err\n            }\n        }\n        p.ApparmorProfile = appArmorProfile\n    }\n    s := &specs.Spec{Process: p}\n    return WithRlimits(daemon, c)(context.Background(), nil, nil, s)\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":234,"CreatedAt":"2022-07-13T03:55:39.582Z","UpdatedAt":"2022-07-13T06:28:01.713Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"调用`containerd.Exec()`方法, 交由containerd处理exec进程。如果超时，调用`daemon.containerd.SignalProcess()`方法kill进程。\n\nhttps://github.com/moby/moby/blob/v20.10.14/daemon/exec.go#L263-L303\n\n```go\nfunc (daemon *Daemon) ContainerExecStart(ctx context.Context, name string, stdin io.Reader, stdout io.Writer, stderr io.Writer) (err error) {\n    ...    \n    systemPid, err := daemon.containerd.Exec(ctx, c.ID, ec.ID, p, cStdin != nil, ec.InitializeStdio)\n    ...\n    select {\n    case <-ctx.Done():\n        ...\n        daemon.containerd.SignalProcess(ctx, c.ID, name, int(signal.SignalMap[\"TERM\"]))\n        timeout := time.NewTimer(termProcessTimeout)\n        ...\n        select {\n        case <-timeout.C:\n            ...\n            daemon.containerd.SignalProcess(ctx, c.ID, name, int(signal.SignalMap[\"KILL\"]))\n        ...\n        }\n        ...\n    }\n    return nil\n}\n```","child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""}]],"toc":[{"nodeName":"H1","innerText":"docker container start 源码分析"},{"nodeName":"H2","innerText":"1. docker container start 简介"},{"nodeName":"H2","innerText":"2. 源码入口位置"},{"nodeName":"H2","innerText":"3. cli"},{"nodeName":"H3","innerText":"3.1 attach"},{"nodeName":"H4","innerText":"3.1.1 确保只有一个容器"},{"nodeName":"H4","innerText":"3.1.2 attach"},{"nodeName":"H4","innerText":"3.1.3 等待容器退出或删除"},{"nodeName":"H4","innerText":"3.1.4 启动容器"},{"nodeName":"H4","innerText":"3.1.5 等待attach退出"},{"nodeName":"H3","innerText":"3.2 未attach，设置了checkpoint"},{"nodeName":"H3","innerText":"3.3 未attach, 也未设置checkpoint"},{"nodeName":"H2","innerText":"4. dockerd api"},{"nodeName":"H3","innerText":"4.1 Daemon.ContainerStart"},{"nodeName":"H3","innerText":"4.2 Daemon.containerStart"},{"nodeName":"H4","innerText":"4.2.1 checkpointDir"},{"nodeName":"H4","innerText":"4.2.2 遇到错误清理容器"},{"nodeName":"H4","innerText":"4.2.3 挂载容器rootfs"},{"nodeName":"H4","innerText":"4.2.4 初始化容器网络"},{"nodeName":"H4","innerText":"4.2.5 创建oci配置"},{"nodeName":"H4","innerText":"4.2.6 为容器对象保存apparmor配置"},{"nodeName":"H4","innerText":"4.2.7 checkpoint"},{"nodeName":"H4","innerText":"4.2.8 containerd shim路径和选项"},{"nodeName":"H4","innerText":"4.2.9 调用containerd api"},{"nodeName":"H4","innerText":"4.2.10 更新容器状态信息"},{"nodeName":"H4","innerText":"4.2.11 HealthCheck"},{"nodeName":"H4","innerText":"4.2.12 保存容器配置"},{"nodeName":"H2","innerText":"5. containerd"},{"nodeName":"H3","innerText":"5.1 daemon.containerd.Create"},{"nodeName":"H3","innerText":"5.2 daemon.containerd.DeleteTask"},{"nodeName":"H3","innerText":"5.3 daemon.containerd.Delete"},{"nodeName":"H3","innerText":"5.4 daemon.containerd.Start"},{"nodeName":"H4","innerText":"5.4.1 checkpoint"},{"nodeName":"H4","innerText":"5.4.2 创建任务选项"},{"nodeName":"H4","innerText":"5.4.3 创建任务"},{"nodeName":"H4","innerText":"5.4.4 启动任务"},{"nodeName":"H3","innerText":"5.5 daemon.containerdCli.LoadContainer"},{"nodeName":"H3","innerText":"5.6 daemon.containerd.Exec"},{"nodeName":"H3","innerText":"5.7 daemon.containerd.SignalProcess"}]}